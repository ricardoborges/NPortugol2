//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g 2012-10-13 15:23:12

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections;
using NPortugol2.VirtualMachine;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace NPortugol2.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class NPortugolWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AR", "ARG", "ASGN", "ASM", "CALL", "CHAR", "DEC", "ESC_SEQ", "EXP", "EXPONENT", "FLOAT", "FUNC", "HEX_DIGIT", "ID", "ILIST", "INDEX", "INIT", "INT", "JMP", "LEXP", "LOOP", "MCALL", "NEWLINE", "OCTAL_ESC", "PARAM", "PCALL", "RET", "SJMP", "SLIST", "STRING", "TYPE", "UNICODE_ESC", "VAR", "WS", "'!='", "'#'", "'%'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'..'", "'/'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'['", "']'", "'ate'", "'dec'", "'e'", "'enquanto'", "'entao'", "'fim'", "'funcao'", "'ou'", "'para'", "'repita'", "'retorne'", "'se'", "'senao'", "'variavel'", "'{'", "'}'", "'falso'", "'nulo'", "'verdadeiro'"
	};
	public const int EOF=-1;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int AR=4;
	public const int ARG=5;
	public const int ASGN=6;
	public const int ASM=7;
	public const int CALL=8;
	public const int CHAR=9;
	public const int DEC=10;
	public const int ESC_SEQ=11;
	public const int EXP=12;
	public const int EXPONENT=13;
	public const int FLOAT=14;
	public const int FUNC=15;
	public const int HEX_DIGIT=16;
	public const int ID=17;
	public const int ILIST=18;
	public const int INDEX=19;
	public const int INIT=20;
	public const int INT=21;
	public const int JMP=22;
	public const int LEXP=23;
	public const int LOOP=24;
	public const int MCALL=25;
	public const int NEWLINE=26;
	public const int OCTAL_ESC=27;
	public const int PARAM=28;
	public const int PCALL=29;
	public const int RET=30;
	public const int SJMP=31;
	public const int SLIST=32;
	public const int STRING=33;
	public const int TYPE=34;
	public const int UNICODE_ESC=35;
	public const int VAR=36;
	public const int WS=37;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;

	public NPortugolWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public NPortugolWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return NPortugolWalker.tokenNames; } }
	public override string GrammarFileName { get { return "E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g"; } }


		ModuleBuilder builder = new ModuleBuilder();
		
		bool inExpression;
		
		//public Dictionary<int, int> SourceMap { get { return emitter.SourceMap; } }
		
		//public bool DebugInfo {get {return emitter.DebugInfo;} set{emitter.DebugInfo = value;} }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_compile();
	partial void LeaveRule_compile();

	// $ANTLR start "compile"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:28:8: public compile returns [Module module] : ( declare_function )* ;
	[GrammarRule("compile")]
	public Module compile()
	{
		EnterRule_compile();
		EnterRule("compile", 1);
		TraceIn("compile", 1);
		Module module = default(Module);


		try { DebugEnterRule(GrammarFileName, "compile");
		DebugLocation(28, 0);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:28:39: ( ( declare_function )* )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:28:41: ( declare_function )*
			{
			DebugLocation(28, 41);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:28:41: ( declare_function )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==FUNC))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:28:41: declare_function
					{
					DebugLocation(28, 41);
					PushFollow(Follow._declare_function_in_compile62);
					declare_function();
					PopFollow();
					if (state.failed) return module;

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(29, 2);
			if (state.backtracking == 0)
			{
				 return builder.Module;
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("compile", 1);
			LeaveRule("compile", 1);
			LeaveRule_compile();
		}
		DebugLocation(30, 0);
		} finally { DebugExitRule(GrammarFileName, "compile"); }
		return module;

	}
	// $ANTLR end "compile"

	partial void EnterRule_declare_function();
	partial void LeaveRule_declare_function();

	// $ANTLR start "declare_function"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:32:1: declare_function : ^( FUNC ( TYPE )? ID ( function_param_list )* ^( SLIST ( statement )* ) ) ;
	[GrammarRule("declare_function")]
	private void declare_function()
	{
		EnterRule_declare_function();
		EnterRule("declare_function", 2);
		TraceIn("declare_function", 2);
		CommonTree TYPE1 = default(CommonTree);
		CommonTree ID2 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "declare_function");
		DebugLocation(32, 0);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:32:18: ( ^( FUNC ( TYPE )? ID ( function_param_list )* ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:32:20: ^( FUNC ( TYPE )? ID ( function_param_list )* ^( SLIST ( statement )* ) )
			{
			DebugLocation(32, 20);
			DebugLocation(32, 22);
			Match(input,FUNC,Follow._FUNC_in_declare_function76); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(32, 27);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:32:27: ( TYPE )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==TYPE))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:32:27: TYPE
				{
				DebugLocation(32, 27);
				TYPE1=(CommonTree)Match(input,TYPE,Follow._TYPE_in_declare_function78); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(32, 33);
			ID2=(CommonTree)Match(input,ID,Follow._ID_in_declare_function81); if (state.failed) return;
			DebugLocation(32, 36);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:32:36: ( function_param_list )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==PARAM))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:32:36: function_param_list
					{
					DebugLocation(32, 36);
					PushFollow(Follow._function_param_list_in_declare_function83);
					function_param_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(32, 57);
			DebugLocation(32, 59);
			Match(input,SLIST,Follow._SLIST_in_declare_function87); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(32, 65);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:32:65: ( statement )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if (((LA4_0>=ASGN && LA4_0<=CALL)||LA4_0==JMP||LA4_0==LOOP||(LA4_0>=RET && LA4_0<=SJMP)||LA4_0==VAR))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:32:65: statement
						{
						DebugLocation(32, 65);
						PushFollow(Follow._statement_in_declare_function89);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(33, 2);
			if (state.backtracking == 0)
			{
				builder.CreateFunction(TYPE1, ID2.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declare_function", 2);
			LeaveRule("declare_function", 2);
			LeaveRule_declare_function();
		}
		DebugLocation(34, 0);
		} finally { DebugExitRule(GrammarFileName, "declare_function"); }
		return;

	}
	// $ANTLR end "declare_function"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:36:1: statement : ( declare_local | if_stat | for_stat | function_call | assign_var | return_stat | asm_code );
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(36, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:36:10: ( declare_local | if_stat | for_stat | function_call | assign_var | return_stat | asm_code )
			int alt5=7;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case VAR:
				{
				alt5 = 1;
				}
				break;
			case JMP:
			case SJMP:
				{
				alt5 = 2;
				}
				break;
			case LOOP:
				{
				alt5 = 3;
				}
				break;
			case CALL:
				{
				alt5 = 4;
				}
				break;
			case ASGN:
				{
				alt5 = 5;
				}
				break;
			case RET:
				{
				alt5 = 6;
				}
				break;
			case ASM:
				{
				alt5 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:36:12: declare_local
				{
				DebugLocation(36, 12);
				PushFollow(Follow._declare_local_in_statement105);
				declare_local();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:37:4: if_stat
				{
				DebugLocation(37, 4);
				PushFollow(Follow._if_stat_in_statement110);
				if_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:38:4: for_stat
				{
				DebugLocation(38, 4);
				PushFollow(Follow._for_stat_in_statement116);
				for_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:39:4: function_call
				{
				DebugLocation(39, 4);
				PushFollow(Follow._function_call_in_statement121);
				function_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:40:4: assign_var
				{
				DebugLocation(40, 4);
				PushFollow(Follow._assign_var_in_statement127);
				assign_var();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:41:4: return_stat
				{
				DebugLocation(41, 4);
				PushFollow(Follow._return_stat_in_statement132);
				return_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:42:4: asm_code
				{
				DebugLocation(42, 4);
				PushFollow(Follow._asm_code_in_statement137);
				asm_code();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(43, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"

	partial void EnterRule_function_param_list();
	partial void LeaveRule_function_param_list();

	// $ANTLR start "function_param_list"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:46:1: function_param_list : ^( PARAM (p+= ID )* ) ;
	[GrammarRule("function_param_list")]
	private void function_param_list()
	{
		EnterRule_function_param_list();
		EnterRule("function_param_list", 4);
		TraceIn("function_param_list", 4);
		CommonTree p = default(CommonTree);
		List<CommonTree> list_p = null;

		try { DebugEnterRule(GrammarFileName, "function_param_list");
		DebugLocation(46, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:47:2: ( ^( PARAM (p+= ID )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:47:5: ^( PARAM (p+= ID )* )
			{
			DebugLocation(47, 5);
			DebugLocation(47, 7);
			Match(input,PARAM,Follow._PARAM_in_function_param_list157); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(47, 14);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:47:14: (p+= ID )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==ID))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:47:14: p+= ID
						{
						DebugLocation(47, 14);
						p=(CommonTree)Match(input,ID,Follow._ID_in_function_param_list161); if (state.failed) return;
						if (list_p==null) list_p=new List<CommonTree>();
						list_p.Add(p);


						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_param_list", 4);
			LeaveRule("function_param_list", 4);
			LeaveRule_function_param_list();
		}
		DebugLocation(48, 1);
		} finally { DebugExitRule(GrammarFileName, "function_param_list"); }
		return;

	}
	// $ANTLR end "function_param_list"

	partial void EnterRule_declare_local();
	partial void LeaveRule_declare_local();

	// $ANTLR start "declare_local"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:50:1: declare_local : ^( VAR (i+= ID )* ) ;
	[GrammarRule("declare_local")]
	private void declare_local()
	{
		EnterRule_declare_local();
		EnterRule("declare_local", 5);
		TraceIn("declare_local", 5);
		CommonTree i = default(CommonTree);
		List<CommonTree> list_i = null;

		try { DebugEnterRule(GrammarFileName, "declare_local");
		DebugLocation(50, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:51:2: ( ^( VAR (i+= ID )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:51:5: ^( VAR (i+= ID )* )
			{
			DebugLocation(51, 5);
			DebugLocation(51, 7);
			Match(input,VAR,Follow._VAR_in_declare_local180); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(51, 12);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:51:12: (i+= ID )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if ((LA7_0==ID))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:51:12: i+= ID
						{
						DebugLocation(51, 12);
						i=(CommonTree)Match(input,ID,Follow._ID_in_declare_local184); if (state.failed) return;
						if (list_i==null) list_i=new List<CommonTree>();
						list_i.Add(i);


						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declare_local", 5);
			LeaveRule("declare_local", 5);
			LeaveRule_declare_local();
		}
		DebugLocation(52, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_local"); }
		return;

	}
	// $ANTLR end "declare_local"

	partial void EnterRule_if_stat();
	partial void LeaveRule_if_stat();

	// $ANTLR start "if_stat"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:54:1: if_stat : ( ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) ) | ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) ) );
	[GrammarRule("if_stat")]
	private void if_stat()
	{
		EnterRule_if_stat();
		EnterRule("if_stat", 6);
		TraceIn("if_stat", 6);
		try { DebugEnterRule(GrammarFileName, "if_stat");
		DebugLocation(54, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:55:2: ( ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) ) | ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==SJMP))
			{
				alt10 = 1;
			}
			else if ((LA10_0==JMP))
			{
				alt10 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:55:5: ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) )
				{
				DebugLocation(55, 5);
				DebugLocation(55, 7);
				Match(input,SJMP,Follow._SJMP_in_if_stat202); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(55, 12);
				DebugLocation(55, 14);
				Match(input,LEXP,Follow._LEXP_in_if_stat205); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(55, 19);
				PushFollow(Follow._logic_expression_in_if_stat207);
				logic_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(55, 37);
				DebugLocation(55, 39);
				Match(input,SLIST,Follow._SLIST_in_if_stat211); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(55, 45);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:55:45: ( statement )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if (((LA8_0>=ASGN && LA8_0<=CALL)||LA8_0==JMP||LA8_0==LOOP||(LA8_0>=RET && LA8_0<=SJMP)||LA8_0==VAR))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:55:45: statement
						{
						DebugLocation(55, 45);
						PushFollow(Follow._statement_in_if_stat213);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(55, 84);
				PushFollow(Follow._senao_stat_in_if_stat218);
				senao_stat();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:56:5: ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) )
				{
				DebugLocation(56, 5);
				DebugLocation(56, 7);
				Match(input,JMP,Follow._JMP_in_if_stat227); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(56, 11);
				DebugLocation(56, 13);
				Match(input,LEXP,Follow._LEXP_in_if_stat230); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(56, 18);
				PushFollow(Follow._logic_expression_in_if_stat232);
				logic_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(56, 36);
				DebugLocation(56, 38);
				Match(input,SLIST,Follow._SLIST_in_if_stat236); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(56, 44);
					// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:56:44: ( statement )*
					try { DebugEnterSubRule(9);
					while (true)
					{
						int alt9=2;
						try { DebugEnterDecision(9, false);
						int LA9_0 = input.LA(1);

						if (((LA9_0>=ASGN && LA9_0<=CALL)||LA9_0==JMP||LA9_0==LOOP||(LA9_0>=RET && LA9_0<=SJMP)||LA9_0==VAR))
						{
							alt9 = 1;
						}


						} finally { DebugExitDecision(9); }
						switch ( alt9 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:56:44: statement
							{
							DebugLocation(56, 44);
							PushFollow(Follow._statement_in_if_stat238);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop9;
						}
					}

					loop9:
						;

					} finally { DebugExitSubRule(9); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("if_stat", 6);
			LeaveRule("if_stat", 6);
			LeaveRule_if_stat();
		}
		DebugLocation(58, 1);
		} finally { DebugExitRule(GrammarFileName, "if_stat"); }
		return;

	}
	// $ANTLR end "if_stat"

	partial void EnterRule_senao_stat();
	partial void LeaveRule_senao_stat();

	// $ANTLR start "senao_stat"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:60:1: senao_stat : ^( SLIST ( statement )* ) ;
	[GrammarRule("senao_stat")]
	private void senao_stat()
	{
		EnterRule_senao_stat();
		EnterRule("senao_stat", 7);
		TraceIn("senao_stat", 7);
		try { DebugEnterRule(GrammarFileName, "senao_stat");
		DebugLocation(60, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:61:2: ( ^( SLIST ( statement )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:61:4: ^( SLIST ( statement )* )
			{
			DebugLocation(61, 4);
			DebugLocation(61, 6);
			Match(input,SLIST,Follow._SLIST_in_senao_stat257); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(61, 12);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:61:12: ( statement )*
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_0 = input.LA(1);

					if (((LA11_0>=ASGN && LA11_0<=CALL)||LA11_0==JMP||LA11_0==LOOP||(LA11_0>=RET && LA11_0<=SJMP)||LA11_0==VAR))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch ( alt11 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:61:12: statement
						{
						DebugLocation(61, 12);
						PushFollow(Follow._statement_in_senao_stat259);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop11;
					}
				}

				loop11:
					;

				} finally { DebugExitSubRule(11); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("senao_stat", 7);
			LeaveRule("senao_stat", 7);
			LeaveRule_senao_stat();
		}
		DebugLocation(63, 1);
		} finally { DebugExitRule(GrammarFileName, "senao_stat"); }
		return;

	}
	// $ANTLR end "senao_stat"

	partial void EnterRule_for_stat();
	partial void LeaveRule_for_stat();

	// $ANTLR start "for_stat"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:66:1: for_stat : ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) ) );
	[GrammarRule("for_stat")]
	private void for_stat()
	{
		EnterRule_for_stat();
		EnterRule("for_stat", 8);
		TraceIn("for_stat", 8);
		CommonTree i = default(CommonTree);
		string a = default(string);

		try { DebugEnterRule(GrammarFileName, "for_stat");
		DebugLocation(66, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:66:9: ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) ) )
			int alt16=4;
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==LOOP))
			{
				int LA16_1 = input.LA(2);

				if ((LA16_1==DOWN))
				{
					int LA16_2 = input.LA(3);

					if ((LA16_2==DEC))
					{
						int LA16_3 = input.LA(4);

						if ((EvaluatePredicate(synpred20_NPortugolWalker_fragment)))
						{
							alt16 = 2;
						}
						else if ((true))
						{
							alt16 = 4;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 16, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA16_2==ASGN))
					{
						int LA16_4 = input.LA(4);

						if ((EvaluatePredicate(synpred18_NPortugolWalker_fragment)))
						{
							alt16 = 1;
						}
						else if ((EvaluatePredicate(synpred22_NPortugolWalker_fragment)))
						{
							alt16 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 16, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 16, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 16, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:66:11: ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) )
				{
				DebugLocation(66, 11);
				DebugLocation(66, 13);
				Match(input,LOOP,Follow._LOOP_in_for_stat282); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(66, 19);
				PushFollow(Follow._assign_var_in_for_stat286);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(66, 32);
				i=(CommonTree)Match(input,INT,Follow._INT_in_for_stat290); if (state.failed) return;
				DebugLocation(66, 37);
				DebugLocation(66, 39);
				Match(input,SLIST,Follow._SLIST_in_for_stat293); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(66, 45);
					// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:66:45: ( statement )*
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if (((LA12_0>=ASGN && LA12_0<=CALL)||LA12_0==JMP||LA12_0==LOOP||(LA12_0>=RET && LA12_0<=SJMP)||LA12_0==VAR))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch ( alt12 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:66:45: statement
							{
							DebugLocation(66, 45);
							PushFollow(Follow._statement_in_for_stat295);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop12;
						}
					}

					loop12:
						;

					} finally { DebugExitSubRule(12); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:67:4: ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) )
				{
				DebugLocation(67, 4);
				DebugLocation(67, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat306); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(67, 11);
				Match(input,DEC,Follow._DEC_in_for_stat308); if (state.failed) return;
				DebugLocation(67, 16);
				PushFollow(Follow._assign_var_in_for_stat312);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(67, 29);
				i=(CommonTree)Match(input,INT,Follow._INT_in_for_stat316); if (state.failed) return;
				DebugLocation(67, 34);
				DebugLocation(67, 36);
				Match(input,SLIST,Follow._SLIST_in_for_stat319); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(67, 42);
					// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:67:42: ( statement )*
					try { DebugEnterSubRule(13);
					while (true)
					{
						int alt13=2;
						try { DebugEnterDecision(13, false);
						int LA13_0 = input.LA(1);

						if (((LA13_0>=ASGN && LA13_0<=CALL)||LA13_0==JMP||LA13_0==LOOP||(LA13_0>=RET && LA13_0<=SJMP)||LA13_0==VAR))
						{
							alt13 = 1;
						}


						} finally { DebugExitDecision(13); }
						switch ( alt13 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:67:42: statement
							{
							DebugLocation(67, 42);
							PushFollow(Follow._statement_in_for_stat321);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop13;
						}
					}

					loop13:
						;

					} finally { DebugExitSubRule(13); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:68:4: ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) )
				{
				DebugLocation(68, 4);
				DebugLocation(68, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat331); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(68, 12);
				PushFollow(Follow._assign_var_in_for_stat335);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(68, 25);
				i=(CommonTree)Match(input,ID,Follow._ID_in_for_stat339); if (state.failed) return;
				DebugLocation(68, 29);
				DebugLocation(68, 31);
				Match(input,SLIST,Follow._SLIST_in_for_stat342); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(68, 37);
					// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:68:37: ( statement )*
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if (((LA14_0>=ASGN && LA14_0<=CALL)||LA14_0==JMP||LA14_0==LOOP||(LA14_0>=RET && LA14_0<=SJMP)||LA14_0==VAR))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch ( alt14 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:68:37: statement
							{
							DebugLocation(68, 37);
							PushFollow(Follow._statement_in_for_stat344);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop14;
						}
					}

					loop14:
						;

					} finally { DebugExitSubRule(14); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:69:4: ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) )
				{
				DebugLocation(69, 4);
				DebugLocation(69, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat355); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(69, 11);
				Match(input,DEC,Follow._DEC_in_for_stat357); if (state.failed) return;
				DebugLocation(69, 16);
				PushFollow(Follow._assign_var_in_for_stat361);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(69, 29);
				i=(CommonTree)Match(input,ID,Follow._ID_in_for_stat365); if (state.failed) return;
				DebugLocation(69, 33);
				DebugLocation(69, 35);
				Match(input,SLIST,Follow._SLIST_in_for_stat368); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(69, 41);
					// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:69:41: ( statement )*
					try { DebugEnterSubRule(15);
					while (true)
					{
						int alt15=2;
						try { DebugEnterDecision(15, false);
						int LA15_0 = input.LA(1);

						if (((LA15_0>=ASGN && LA15_0<=CALL)||LA15_0==JMP||LA15_0==LOOP||(LA15_0>=RET && LA15_0<=SJMP)||LA15_0==VAR))
						{
							alt15 = 1;
						}


						} finally { DebugExitDecision(15); }
						switch ( alt15 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:69:41: statement
							{
							DebugLocation(69, 41);
							PushFollow(Follow._statement_in_for_stat370);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop15;
						}
					}

					loop15:
						;

					} finally { DebugExitSubRule(15); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_stat", 8);
			LeaveRule("for_stat", 8);
			LeaveRule_for_stat();
		}
		DebugLocation(70, 1);
		} finally { DebugExitRule(GrammarFileName, "for_stat"); }
		return;

	}
	// $ANTLR end "for_stat"

	partial void EnterRule_function_call();
	partial void LeaveRule_function_call();

	// $ANTLR start "function_call"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:72:1: function_call : ^( CALL ID ( function_arg_list )* ) ;
	[GrammarRule("function_call")]
	private void function_call()
	{
		EnterRule_function_call();
		EnterRule("function_call", 9);
		TraceIn("function_call", 9);
		try { DebugEnterRule(GrammarFileName, "function_call");
		DebugLocation(72, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:73:2: ( ^( CALL ID ( function_arg_list )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:73:5: ^( CALL ID ( function_arg_list )* )
			{
			DebugLocation(73, 5);
			DebugLocation(73, 7);
			Match(input,CALL,Follow._CALL_in_function_call394); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(73, 12);
			Match(input,ID,Follow._ID_in_function_call396); if (state.failed) return;
			DebugLocation(73, 15);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:73:15: ( function_arg_list )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==ARG))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:73:15: function_arg_list
					{
					DebugLocation(73, 15);
					PushFollow(Follow._function_arg_list_in_function_call398);
					function_arg_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_call", 9);
			LeaveRule("function_call", 9);
			LeaveRule_function_call();
		}
		DebugLocation(75, 1);
		} finally { DebugExitRule(GrammarFileName, "function_call"); }
		return;

	}
	// $ANTLR end "function_call"

	partial void EnterRule_property_call();
	partial void LeaveRule_property_call();

	// $ANTLR start "property_call"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:77:1: property_call : ^( PCALL o= ID p= ID ) ;
	[GrammarRule("property_call")]
	private void property_call()
	{
		EnterRule_property_call();
		EnterRule("property_call", 10);
		TraceIn("property_call", 10);
		CommonTree o = default(CommonTree);
		CommonTree p = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "property_call");
		DebugLocation(77, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:78:2: ( ^( PCALL o= ID p= ID ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:78:5: ^( PCALL o= ID p= ID )
			{
			DebugLocation(78, 5);
			DebugLocation(78, 7);
			Match(input,PCALL,Follow._PCALL_in_property_call419); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(78, 14);
			o=(CommonTree)Match(input,ID,Follow._ID_in_property_call423); if (state.failed) return;
			DebugLocation(78, 19);
			p=(CommonTree)Match(input,ID,Follow._ID_in_property_call427); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("property_call", 10);
			LeaveRule("property_call", 10);
			LeaveRule_property_call();
		}
		DebugLocation(80, 1);
		} finally { DebugExitRule(GrammarFileName, "property_call"); }
		return;

	}
	// $ANTLR end "property_call"

	partial void EnterRule_method_call();
	partial void LeaveRule_method_call();

	// $ANTLR start "method_call"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:82:1: method_call : ^( MCALL o= ID p= ID ( function_arg_list )* ) ;
	[GrammarRule("method_call")]
	private void method_call()
	{
		EnterRule_method_call();
		EnterRule("method_call", 11);
		TraceIn("method_call", 11);
		CommonTree o = default(CommonTree);
		CommonTree p = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "method_call");
		DebugLocation(82, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:83:2: ( ^( MCALL o= ID p= ID ( function_arg_list )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:83:5: ^( MCALL o= ID p= ID ( function_arg_list )* )
			{
			DebugLocation(83, 5);
			DebugLocation(83, 7);
			Match(input,MCALL,Follow._MCALL_in_method_call452); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(83, 14);
			o=(CommonTree)Match(input,ID,Follow._ID_in_method_call456); if (state.failed) return;
			DebugLocation(83, 19);
			p=(CommonTree)Match(input,ID,Follow._ID_in_method_call460); if (state.failed) return;
			DebugLocation(83, 23);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:83:23: ( function_arg_list )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==ARG))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:83:23: function_arg_list
					{
					DebugLocation(83, 23);
					PushFollow(Follow._function_arg_list_in_method_call462);
					function_arg_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("method_call", 11);
			LeaveRule("method_call", 11);
			LeaveRule_method_call();
		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "method_call"); }
		return;

	}
	// $ANTLR end "method_call"

	partial void EnterRule_function_arg_list();
	partial void LeaveRule_function_arg_list();

	// $ANTLR start "function_arg_list"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:87:1: function_arg_list : ^( ARG ( plus_expression )* ) ;
	[GrammarRule("function_arg_list")]
	private void function_arg_list()
	{
		EnterRule_function_arg_list();
		EnterRule("function_arg_list", 12);
		TraceIn("function_arg_list", 12);
		try { DebugEnterRule(GrammarFileName, "function_arg_list");
		DebugLocation(87, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:89:2: ( ^( ARG ( plus_expression )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:89:4: ^( ARG ( plus_expression )* )
			{
			DebugLocation(89, 4);
			DebugLocation(89, 6);
			Match(input,ARG,Follow._ARG_in_function_arg_list488); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(89, 10);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:89:10: ( plus_expression )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==CALL||LA19_0==FLOAT||LA19_0==ID||LA19_0==INDEX||LA19_0==INT||LA19_0==MCALL||LA19_0==PCALL||LA19_0==STRING||(LA19_0>=43 && LA19_0<=44)||LA19_0==46||LA19_0==49))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:89:10: plus_expression
						{
						DebugLocation(89, 10);
						PushFollow(Follow._plus_expression_in_function_arg_list490);
						plus_expression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_arg_list", 12);
			LeaveRule("function_arg_list", 12);
			LeaveRule_function_arg_list();
		}
		DebugLocation(90, 1);
		} finally { DebugExitRule(GrammarFileName, "function_arg_list"); }
		return;

	}
	// $ANTLR end "function_arg_list"

	partial void EnterRule_asm_code();
	partial void LeaveRule_asm_code();

	// $ANTLR start "asm_code"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:93:1: asm_code : ^( ASM (s+= STRING )* ) ;
	[GrammarRule("asm_code")]
	private void asm_code()
	{
		EnterRule_asm_code();
		EnterRule("asm_code", 13);
		TraceIn("asm_code", 13);
		CommonTree s = default(CommonTree);
		List<CommonTree> list_s = null;

		try { DebugEnterRule(GrammarFileName, "asm_code");
		DebugLocation(93, 8);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:93:9: ( ^( ASM (s+= STRING )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:93:11: ^( ASM (s+= STRING )* )
			{
			DebugLocation(93, 11);
			DebugLocation(93, 13);
			Match(input,ASM,Follow._ASM_in_asm_code506); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(93, 18);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:93:18: (s+= STRING )*
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_0 = input.LA(1);

					if ((LA20_0==STRING))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch ( alt20 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:93:18: s+= STRING
						{
						DebugLocation(93, 18);
						s=(CommonTree)Match(input,STRING,Follow._STRING_in_asm_code510); if (state.failed) return;
						if (list_s==null) list_s=new List<CommonTree>();
						list_s.Add(s);


						}
						break;

					default:
						goto loop20;
					}
				}

				loop20:
					;

				} finally { DebugExitSubRule(20); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("asm_code", 13);
			LeaveRule("asm_code", 13);
			LeaveRule_asm_code();
		}
		DebugLocation(95, 8);
		} finally { DebugExitRule(GrammarFileName, "asm_code"); }
		return;

	}
	// $ANTLR end "asm_code"

	partial void EnterRule_assign_var();
	partial void LeaveRule_assign_var();

	// $ANTLR start "assign_var"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:98:1: assign_var returns [string id] : ( ^( ASGN ID a= atom ) | ^( ASGN ^( AR INT ) ID plus_expression ) | ^( ASGN ^( AR i= ID ) p= ID plus_expression ) | ^( ASGN ID plus_expression ) | ^( ASGN ID 'nulo' ) | ^( ASGN ID 'falso' ) | ^( ASGN ID 'verdadeiro' ) | ^( ASGN ID l= INT r= INT ) | ^( ASGN ID ^( ILIST (i= INT )* ) ) );
	[GrammarRule("assign_var")]
	private string assign_var()
	{
		EnterRule_assign_var();
		EnterRule("assign_var", 14);
		TraceIn("assign_var", 14);
		string id = default(string);


		CommonTree i = default(CommonTree);
		CommonTree p = default(CommonTree);
		CommonTree l = default(CommonTree);
		CommonTree r = default(CommonTree);
		object a = default(object);

		try { DebugEnterRule(GrammarFileName, "assign_var");
		DebugLocation(98, 4);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:99:5: ( ^( ASGN ID a= atom ) | ^( ASGN ^( AR INT ) ID plus_expression ) | ^( ASGN ^( AR i= ID ) p= ID plus_expression ) | ^( ASGN ID plus_expression ) | ^( ASGN ID 'nulo' ) | ^( ASGN ID 'falso' ) | ^( ASGN ID 'verdadeiro' ) | ^( ASGN ID l= INT r= INT ) | ^( ASGN ID ^( ILIST (i= INT )* ) ) )
			int alt22=9;
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==ASGN))
			{
				int LA22_1 = input.LA(2);

				if ((LA22_1==DOWN))
				{
					int LA22_2 = input.LA(3);

					if ((LA22_2==ID))
					{
						int LA22_3 = input.LA(4);

						if ((EvaluatePredicate(synpred28_NPortugolWalker_fragment)))
						{
							alt22 = 1;
						}
						else if ((EvaluatePredicate(synpred31_NPortugolWalker_fragment)))
						{
							alt22 = 4;
						}
						else if ((EvaluatePredicate(synpred32_NPortugolWalker_fragment)))
						{
							alt22 = 5;
						}
						else if ((EvaluatePredicate(synpred33_NPortugolWalker_fragment)))
						{
							alt22 = 6;
						}
						else if ((EvaluatePredicate(synpred34_NPortugolWalker_fragment)))
						{
							alt22 = 7;
						}
						else if ((EvaluatePredicate(synpred35_NPortugolWalker_fragment)))
						{
							alt22 = 8;
						}
						else if ((true))
						{
							alt22 = 9;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return id;}
							NoViableAltException nvae = new NoViableAltException("", 22, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA22_2==AR))
					{
						int LA22_4 = input.LA(4);

						if ((EvaluatePredicate(synpred29_NPortugolWalker_fragment)))
						{
							alt22 = 2;
						}
						else if ((EvaluatePredicate(synpred30_NPortugolWalker_fragment)))
						{
							alt22 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return id;}
							NoViableAltException nvae = new NoViableAltException("", 22, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return id;}
						NoViableAltException nvae = new NoViableAltException("", 22, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return id;}
					NoViableAltException nvae = new NoViableAltException("", 22, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return id;}
				NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:100:7: ^( ASGN ID a= atom )
				{
				DebugLocation(100, 7);
				DebugLocation(100, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var551); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(100, 14);
				Match(input,ID,Follow._ID_in_assign_var553); if (state.failed) return id;
				DebugLocation(100, 18);
				PushFollow(Follow._atom_in_assign_var557);
				a=atom();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:101:7: ^( ASGN ^( AR INT ) ID plus_expression )
				{
				DebugLocation(101, 7);
				DebugLocation(101, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var569); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(101, 14);
				DebugLocation(101, 16);
				Match(input,AR,Follow._AR_in_assign_var572); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(101, 19);
				Match(input,INT,Follow._INT_in_assign_var574); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(101, 24);
				Match(input,ID,Follow._ID_in_assign_var577); if (state.failed) return id;
				DebugLocation(101, 27);
				PushFollow(Follow._plus_expression_in_assign_var579);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:102:7: ^( ASGN ^( AR i= ID ) p= ID plus_expression )
				{
				DebugLocation(102, 7);
				DebugLocation(102, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var595); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(102, 14);
				DebugLocation(102, 16);
				Match(input,AR,Follow._AR_in_assign_var598); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(102, 20);
				i=(CommonTree)Match(input,ID,Follow._ID_in_assign_var602); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(102, 26);
				p=(CommonTree)Match(input,ID,Follow._ID_in_assign_var607); if (state.failed) return id;
				DebugLocation(102, 30);
				PushFollow(Follow._plus_expression_in_assign_var609);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:103:7: ^( ASGN ID plus_expression )
				{
				DebugLocation(103, 7);
				DebugLocation(103, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var628); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(103, 14);
				Match(input,ID,Follow._ID_in_assign_var630); if (state.failed) return id;
				DebugLocation(103, 17);
				PushFollow(Follow._plus_expression_in_assign_var632);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:104:7: ^( ASGN ID 'nulo' )
				{
				DebugLocation(104, 7);
				DebugLocation(104, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var645); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(104, 14);
				Match(input,ID,Follow._ID_in_assign_var647); if (state.failed) return id;
				DebugLocation(104, 17);
				Match(input,75,Follow._75_in_assign_var649); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:105:7: ^( ASGN ID 'falso' )
				{
				DebugLocation(105, 7);
				DebugLocation(105, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var662); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(105, 14);
				Match(input,ID,Follow._ID_in_assign_var664); if (state.failed) return id;
				DebugLocation(105, 17);
				Match(input,74,Follow._74_in_assign_var666); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:106:7: ^( ASGN ID 'verdadeiro' )
				{
				DebugLocation(106, 7);
				DebugLocation(106, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var678); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(106, 14);
				Match(input,ID,Follow._ID_in_assign_var680); if (state.failed) return id;
				DebugLocation(106, 17);
				Match(input,76,Follow._76_in_assign_var682); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:107:7: ^( ASGN ID l= INT r= INT )
				{
				DebugLocation(107, 7);
				DebugLocation(107, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var700); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(107, 14);
				Match(input,ID,Follow._ID_in_assign_var702); if (state.failed) return id;
				DebugLocation(107, 18);
				l=(CommonTree)Match(input,INT,Follow._INT_in_assign_var706); if (state.failed) return id;
				DebugLocation(107, 24);
				r=(CommonTree)Match(input,INT,Follow._INT_in_assign_var710); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:108:7: ^( ASGN ID ^( ILIST (i= INT )* ) )
				{
				DebugLocation(108, 7);
				DebugLocation(108, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var722); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(108, 14);
				Match(input,ID,Follow._ID_in_assign_var724); if (state.failed) return id;
				DebugLocation(108, 17);
				DebugLocation(108, 19);
				Match(input,ILIST,Follow._ILIST_in_assign_var727); if (state.failed) return id;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return id;
					DebugLocation(108, 26);
					// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:108:26: (i= INT )*
					try { DebugEnterSubRule(21);
					while (true)
					{
						int alt21=2;
						try { DebugEnterDecision(21, false);
						int LA21_0 = input.LA(1);

						if ((LA21_0==INT))
						{
							alt21 = 1;
						}


						} finally { DebugExitDecision(21); }
						switch ( alt21 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:108:26: i= INT
							{
							DebugLocation(108, 26);
							i=(CommonTree)Match(input,INT,Follow._INT_in_assign_var731); if (state.failed) return id;

							}
							break;

						default:
							goto loop21;
						}
					}

					loop21:
						;

					} finally { DebugExitSubRule(21); }


					Match(input, TokenTypes.Up, null); if (state.failed) return id;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assign_var", 14);
			LeaveRule("assign_var", 14);
			LeaveRule_assign_var();
		}
		DebugLocation(109, 4);
		} finally { DebugExitRule(GrammarFileName, "assign_var"); }
		return id;

	}
	// $ANTLR end "assign_var"

	partial void EnterRule_return_stat();
	partial void LeaveRule_return_stat();

	// $ANTLR start "return_stat"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:111:1: return_stat : ^( RET plus_expression ) ;
	[GrammarRule("return_stat")]
	private void return_stat()
	{
		EnterRule_return_stat();
		EnterRule("return_stat", 15);
		TraceIn("return_stat", 15);
		try { DebugEnterRule(GrammarFileName, "return_stat");
		DebugLocation(111, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:112:2: ( ^( RET plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:112:5: ^( RET plus_expression )
			{
			DebugLocation(112, 5);
			DebugLocation(112, 7);
			Match(input,RET,Follow._RET_in_return_stat754); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(112, 11);
			PushFollow(Follow._plus_expression_in_return_stat756);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("return_stat", 15);
			LeaveRule("return_stat", 15);
			LeaveRule_return_stat();
		}
		DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "return_stat"); }
		return;

	}
	// $ANTLR end "return_stat"

	partial void EnterRule_plus_expression();
	partial void LeaveRule_plus_expression();

	// $ANTLR start "plus_expression"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:118:1: plus_expression : ( ^( '+' plus_expression plus_expression ) | ^( '-' plus_expression plus_expression ) | ^( '*' plus_expression plus_expression ) | ^( '/' plus_expression plus_expression ) | ^( INDEX INT ) ID | ^( INDEX i2= ID ) i1= ID | function_call | method_call | property_call | atom );
	[GrammarRule("plus_expression")]
	private void plus_expression()
	{
		EnterRule_plus_expression();
		EnterRule("plus_expression", 16);
		TraceIn("plus_expression", 16);
		CommonTree i2 = default(CommonTree);
		CommonTree i1 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "plus_expression");
		DebugLocation(118, 0);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:119:3: ( ^( '+' plus_expression plus_expression ) | ^( '-' plus_expression plus_expression ) | ^( '*' plus_expression plus_expression ) | ^( '/' plus_expression plus_expression ) | ^( INDEX INT ) ID | ^( INDEX i2= ID ) i1= ID | function_call | method_call | property_call | atom )
			int alt23=10;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case 44:
				{
				alt23 = 1;
				}
				break;
			case 46:
				{
				alt23 = 2;
				}
				break;
			case 43:
				{
				alt23 = 3;
				}
				break;
			case 49:
				{
				alt23 = 4;
				}
				break;
			case INDEX:
				{
				int LA23_5 = input.LA(2);

				if ((LA23_5==DOWN))
				{
					int LA23_13 = input.LA(3);

					if ((LA23_13==INT))
					{
						alt23 = 5;
					}
					else if ((LA23_13==ID))
					{
						alt23 = 6;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 23, 13, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 23, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CALL:
				{
				alt23 = 7;
				}
				break;
			case MCALL:
				{
				alt23 = 8;
				}
				break;
			case PCALL:
				{
				alt23 = 9;
				}
				break;
			case FLOAT:
			case ID:
			case INT:
			case STRING:
				{
				alt23 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:119:3: ^( '+' plus_expression plus_expression )
				{
				DebugLocation(119, 3);
				DebugLocation(119, 5);
				Match(input,44,Follow._44_in_plus_expression772); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(119, 9);
				PushFollow(Follow._plus_expression_in_plus_expression774);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(119, 25);
				PushFollow(Follow._plus_expression_in_plus_expression776);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:120:3: ^( '-' plus_expression plus_expression )
				{
				DebugLocation(120, 3);
				DebugLocation(120, 5);
				Match(input,46,Follow._46_in_plus_expression784); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(120, 9);
				PushFollow(Follow._plus_expression_in_plus_expression786);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(120, 25);
				PushFollow(Follow._plus_expression_in_plus_expression788);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:121:3: ^( '*' plus_expression plus_expression )
				{
				DebugLocation(121, 3);
				DebugLocation(121, 5);
				Match(input,43,Follow._43_in_plus_expression796); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(121, 9);
				PushFollow(Follow._plus_expression_in_plus_expression798);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(121, 25);
				PushFollow(Follow._plus_expression_in_plus_expression800);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:122:3: ^( '/' plus_expression plus_expression )
				{
				DebugLocation(122, 3);
				DebugLocation(122, 5);
				Match(input,49,Follow._49_in_plus_expression808); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(122, 9);
				PushFollow(Follow._plus_expression_in_plus_expression810);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(122, 25);
				PushFollow(Follow._plus_expression_in_plus_expression812);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:123:3: ^( INDEX INT ) ID
				{
				DebugLocation(123, 3);
				DebugLocation(123, 5);
				Match(input,INDEX,Follow._INDEX_in_plus_expression820); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(123, 11);
				Match(input,INT,Follow._INT_in_plus_expression822); if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(123, 16);
				Match(input,ID,Follow._ID_in_plus_expression825); if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:124:3: ^( INDEX i2= ID ) i1= ID
				{
				DebugLocation(124, 3);
				DebugLocation(124, 5);
				Match(input,INDEX,Follow._INDEX_in_plus_expression832); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(124, 13);
				i2=(CommonTree)Match(input,ID,Follow._ID_in_plus_expression836); if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(124, 20);
				i1=(CommonTree)Match(input,ID,Follow._ID_in_plus_expression841); if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:125:3: function_call
				{
				DebugLocation(125, 3);
				PushFollow(Follow._function_call_in_plus_expression847);
				function_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:126:3: method_call
				{
				DebugLocation(126, 3);
				PushFollow(Follow._method_call_in_plus_expression851);
				method_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:127:3: property_call
				{
				DebugLocation(127, 3);
				PushFollow(Follow._property_call_in_plus_expression855);
				property_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:128:3: atom
				{
				DebugLocation(128, 3);
				PushFollow(Follow._atom_in_plus_expression859);
				atom();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("plus_expression", 16);
			LeaveRule("plus_expression", 16);
			LeaveRule_plus_expression();
		}
		DebugLocation(129, 0);
		} finally { DebugExitRule(GrammarFileName, "plus_expression"); }
		return;

	}
	// $ANTLR end "plus_expression"

	partial void EnterRule_logic_expression();
	partial void LeaveRule_logic_expression();

	// $ANTLR start "logic_expression"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:131:1: logic_expression : ( ^( '<' plus_expression plus_expression ) | ^( '>' plus_expression plus_expression ) | ^( '<=' plus_expression plus_expression ) | ^( '>=' plus_expression plus_expression ) | ^( '==' plus_expression plus_expression ) | ^( '!=' plus_expression plus_expression ) | ^( 'e' plus_expression plus_expression ) | ^( 'ou' plus_expression plus_expression ) | plus_expression );
	[GrammarRule("logic_expression")]
	private void logic_expression()
	{
		EnterRule_logic_expression();
		EnterRule("logic_expression", 17);
		TraceIn("logic_expression", 17);
		try { DebugEnterRule(GrammarFileName, "logic_expression");
		DebugLocation(131, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:132:2: ( ^( '<' plus_expression plus_expression ) | ^( '>' plus_expression plus_expression ) | ^( '<=' plus_expression plus_expression ) | ^( '>=' plus_expression plus_expression ) | ^( '==' plus_expression plus_expression ) | ^( '!=' plus_expression plus_expression ) | ^( 'e' plus_expression plus_expression ) | ^( 'ou' plus_expression plus_expression ) | plus_expression )
			int alt24=9;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case 50:
				{
				alt24 = 1;
				}
				break;
			case 54:
				{
				alt24 = 2;
				}
				break;
			case 51:
				{
				alt24 = 3;
				}
				break;
			case 55:
				{
				alt24 = 4;
				}
				break;
			case 53:
				{
				alt24 = 5;
				}
				break;
			case 38:
				{
				alt24 = 6;
				}
				break;
			case 60:
				{
				alt24 = 7;
				}
				break;
			case 65:
				{
				alt24 = 8;
				}
				break;
			case CALL:
			case FLOAT:
			case ID:
			case INDEX:
			case INT:
			case MCALL:
			case PCALL:
			case STRING:
			case 43:
			case 44:
			case 46:
			case 49:
				{
				alt24 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:132:6: ^( '<' plus_expression plus_expression )
				{
				DebugLocation(132, 6);
				DebugLocation(132, 8);
				Match(input,50,Follow._50_in_logic_expression872); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(132, 12);
				PushFollow(Follow._plus_expression_in_logic_expression874);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(132, 28);
				PushFollow(Follow._plus_expression_in_logic_expression876);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:133:6: ^( '>' plus_expression plus_expression )
				{
				DebugLocation(133, 6);
				DebugLocation(133, 8);
				Match(input,54,Follow._54_in_logic_expression887); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(133, 12);
				PushFollow(Follow._plus_expression_in_logic_expression889);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(133, 28);
				PushFollow(Follow._plus_expression_in_logic_expression891);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:134:6: ^( '<=' plus_expression plus_expression )
				{
				DebugLocation(134, 6);
				DebugLocation(134, 8);
				Match(input,51,Follow._51_in_logic_expression902); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(134, 13);
				PushFollow(Follow._plus_expression_in_logic_expression904);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(134, 29);
				PushFollow(Follow._plus_expression_in_logic_expression906);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:135:6: ^( '>=' plus_expression plus_expression )
				{
				DebugLocation(135, 6);
				DebugLocation(135, 8);
				Match(input,55,Follow._55_in_logic_expression917); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(135, 13);
				PushFollow(Follow._plus_expression_in_logic_expression919);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(135, 29);
				PushFollow(Follow._plus_expression_in_logic_expression921);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:136:6: ^( '==' plus_expression plus_expression )
				{
				DebugLocation(136, 6);
				DebugLocation(136, 8);
				Match(input,53,Follow._53_in_logic_expression932); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(136, 13);
				PushFollow(Follow._plus_expression_in_logic_expression934);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(136, 29);
				PushFollow(Follow._plus_expression_in_logic_expression936);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:137:6: ^( '!=' plus_expression plus_expression )
				{
				DebugLocation(137, 6);
				DebugLocation(137, 8);
				Match(input,38,Follow._38_in_logic_expression947); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(137, 13);
				PushFollow(Follow._plus_expression_in_logic_expression949);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(137, 29);
				PushFollow(Follow._plus_expression_in_logic_expression951);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:138:6: ^( 'e' plus_expression plus_expression )
				{
				DebugLocation(138, 6);
				DebugLocation(138, 8);
				Match(input,60,Follow._60_in_logic_expression961); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(138, 12);
				PushFollow(Follow._plus_expression_in_logic_expression963);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(138, 28);
				PushFollow(Follow._plus_expression_in_logic_expression965);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:139:6: ^( 'ou' plus_expression plus_expression )
				{
				DebugLocation(139, 6);
				DebugLocation(139, 8);
				Match(input,65,Follow._65_in_logic_expression974); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(139, 13);
				PushFollow(Follow._plus_expression_in_logic_expression976);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(139, 29);
				PushFollow(Follow._plus_expression_in_logic_expression978);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:140:4: plus_expression
				{
				DebugLocation(140, 4);
				PushFollow(Follow._plus_expression_in_logic_expression990);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logic_expression", 17);
			LeaveRule("logic_expression", 17);
			LeaveRule_logic_expression();
		}
		DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "logic_expression"); }
		return;

	}
	// $ANTLR end "logic_expression"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();

	// $ANTLR start "atom"
	// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:145:1: atom returns [object value] : (a= ID |a= INT |a= FLOAT |a= STRING );
	[GrammarRule("atom")]
	private object atom()
	{
		EnterRule_atom();
		EnterRule("atom", 18);
		TraceIn("atom", 18);
		object value = default(object);


		CommonTree a = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(145, 4);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:145:27: (a= ID |a= INT |a= FLOAT |a= STRING )
			int alt25=4;
			try { DebugEnterDecision(25, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt25 = 1;
				}
				break;
			case INT:
				{
				alt25 = 2;
				}
				break;
			case FLOAT:
				{
				alt25 = 3;
				}
				break;
			case STRING:
				{
				alt25 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:146:7: a= ID
				{
				DebugLocation(146, 8);
				a=(CommonTree)Match(input,ID,Follow._ID_in_atom1018); if (state.failed) return value;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:147:7: a= INT
				{
				DebugLocation(147, 8);
				a=(CommonTree)Match(input,INT,Follow._INT_in_atom1030); if (state.failed) return value;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:148:7: a= FLOAT
				{
				DebugLocation(148, 8);
				a=(CommonTree)Match(input,FLOAT,Follow._FLOAT_in_atom1042); if (state.failed) return value;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:149:7: a= STRING
				{
				DebugLocation(149, 8);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_atom1054); if (state.failed) return value;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("atom", 18);
			LeaveRule("atom", 18);
			LeaveRule_atom();
		}
		DebugLocation(150, 4);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return value;

	}
	// $ANTLR end "atom"

	partial void EnterRule_synpred18_NPortugolWalker_fragment();
	partial void LeaveRule_synpred18_NPortugolWalker_fragment();

	// $ANTLR start synpred18_NPortugolWalker
	public void synpred18_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred18_NPortugolWalker_fragment();
		EnterRule("synpred18_NPortugolWalker_fragment", 36);
		TraceIn("synpred18_NPortugolWalker_fragment", 36);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:66:11: ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:66:11: ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) )
			{
			DebugLocation(66, 11);
			DebugLocation(66, 13);
			Match(input,LOOP,Follow._LOOP_in_synpred18_NPortugolWalker282); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(66, 19);
			PushFollow(Follow._assign_var_in_synpred18_NPortugolWalker286);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(66, 32);
			i=(CommonTree)Match(input,INT,Follow._INT_in_synpred18_NPortugolWalker290); if (state.failed) return;
			DebugLocation(66, 37);
			DebugLocation(66, 39);
			Match(input,SLIST,Follow._SLIST_in_synpred18_NPortugolWalker293); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(66, 45);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:66:45: ( statement )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if (((LA27_0>=ASGN && LA27_0<=CALL)||LA27_0==JMP||LA27_0==LOOP||(LA27_0>=RET && LA27_0<=SJMP)||LA27_0==VAR))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:66:45: statement
						{
						DebugLocation(66, 45);
						PushFollow(Follow._statement_in_synpred18_NPortugolWalker295);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred18_NPortugolWalker_fragment", 36);
			LeaveRule("synpred18_NPortugolWalker_fragment", 36);
			LeaveRule_synpred18_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred18_NPortugolWalker

	partial void EnterRule_synpred20_NPortugolWalker_fragment();
	partial void LeaveRule_synpred20_NPortugolWalker_fragment();

	// $ANTLR start synpred20_NPortugolWalker
	public void synpred20_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred20_NPortugolWalker_fragment();
		EnterRule("synpred20_NPortugolWalker_fragment", 38);
		TraceIn("synpred20_NPortugolWalker_fragment", 38);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:67:4: ( ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:67:4: ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) )
			{
			DebugLocation(67, 4);
			DebugLocation(67, 6);
			Match(input,LOOP,Follow._LOOP_in_synpred20_NPortugolWalker306); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(67, 11);
			Match(input,DEC,Follow._DEC_in_synpred20_NPortugolWalker308); if (state.failed) return;
			DebugLocation(67, 16);
			PushFollow(Follow._assign_var_in_synpred20_NPortugolWalker312);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(67, 29);
			i=(CommonTree)Match(input,INT,Follow._INT_in_synpred20_NPortugolWalker316); if (state.failed) return;
			DebugLocation(67, 34);
			DebugLocation(67, 36);
			Match(input,SLIST,Follow._SLIST_in_synpred20_NPortugolWalker319); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(67, 42);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:67:42: ( statement )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if (((LA28_0>=ASGN && LA28_0<=CALL)||LA28_0==JMP||LA28_0==LOOP||(LA28_0>=RET && LA28_0<=SJMP)||LA28_0==VAR))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:67:42: statement
						{
						DebugLocation(67, 42);
						PushFollow(Follow._statement_in_synpred20_NPortugolWalker321);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred20_NPortugolWalker_fragment", 38);
			LeaveRule("synpred20_NPortugolWalker_fragment", 38);
			LeaveRule_synpred20_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred20_NPortugolWalker

	partial void EnterRule_synpred22_NPortugolWalker_fragment();
	partial void LeaveRule_synpred22_NPortugolWalker_fragment();

	// $ANTLR start synpred22_NPortugolWalker
	public void synpred22_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred22_NPortugolWalker_fragment();
		EnterRule("synpred22_NPortugolWalker_fragment", 40);
		TraceIn("synpred22_NPortugolWalker_fragment", 40);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:68:4: ( ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:68:4: ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) )
			{
			DebugLocation(68, 4);
			DebugLocation(68, 6);
			Match(input,LOOP,Follow._LOOP_in_synpred22_NPortugolWalker331); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(68, 12);
			PushFollow(Follow._assign_var_in_synpred22_NPortugolWalker335);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(68, 25);
			i=(CommonTree)Match(input,ID,Follow._ID_in_synpred22_NPortugolWalker339); if (state.failed) return;
			DebugLocation(68, 29);
			DebugLocation(68, 31);
			Match(input,SLIST,Follow._SLIST_in_synpred22_NPortugolWalker342); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(68, 37);
				// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:68:37: ( statement )*
				try { DebugEnterSubRule(29);
				while (true)
				{
					int alt29=2;
					try { DebugEnterDecision(29, false);
					int LA29_0 = input.LA(1);

					if (((LA29_0>=ASGN && LA29_0<=CALL)||LA29_0==JMP||LA29_0==LOOP||(LA29_0>=RET && LA29_0<=SJMP)||LA29_0==VAR))
					{
						alt29 = 1;
					}


					} finally { DebugExitDecision(29); }
					switch ( alt29 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:68:37: statement
						{
						DebugLocation(68, 37);
						PushFollow(Follow._statement_in_synpred22_NPortugolWalker344);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop29;
					}
				}

				loop29:
					;

				} finally { DebugExitSubRule(29); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred22_NPortugolWalker_fragment", 40);
			LeaveRule("synpred22_NPortugolWalker_fragment", 40);
			LeaveRule_synpred22_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred22_NPortugolWalker

	partial void EnterRule_synpred28_NPortugolWalker_fragment();
	partial void LeaveRule_synpred28_NPortugolWalker_fragment();

	// $ANTLR start synpred28_NPortugolWalker
	public void synpred28_NPortugolWalker_fragment()
	{
		object a = default(object);

		EnterRule_synpred28_NPortugolWalker_fragment();
		EnterRule("synpred28_NPortugolWalker_fragment", 46);
		TraceIn("synpred28_NPortugolWalker_fragment", 46);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:100:7: ( ^( ASGN ID a= atom ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:100:7: ^( ASGN ID a= atom )
			{
			DebugLocation(100, 7);
			DebugLocation(100, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred28_NPortugolWalker551); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(100, 14);
			Match(input,ID,Follow._ID_in_synpred28_NPortugolWalker553); if (state.failed) return;
			DebugLocation(100, 18);
			PushFollow(Follow._atom_in_synpred28_NPortugolWalker557);
			a=atom();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred28_NPortugolWalker_fragment", 46);
			LeaveRule("synpred28_NPortugolWalker_fragment", 46);
			LeaveRule_synpred28_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred28_NPortugolWalker

	partial void EnterRule_synpred29_NPortugolWalker_fragment();
	partial void LeaveRule_synpred29_NPortugolWalker_fragment();

	// $ANTLR start synpred29_NPortugolWalker
	public void synpred29_NPortugolWalker_fragment()
	{
		EnterRule_synpred29_NPortugolWalker_fragment();
		EnterRule("synpred29_NPortugolWalker_fragment", 47);
		TraceIn("synpred29_NPortugolWalker_fragment", 47);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:101:7: ( ^( ASGN ^( AR INT ) ID plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:101:7: ^( ASGN ^( AR INT ) ID plus_expression )
			{
			DebugLocation(101, 7);
			DebugLocation(101, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred29_NPortugolWalker569); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(101, 14);
			DebugLocation(101, 16);
			Match(input,AR,Follow._AR_in_synpred29_NPortugolWalker572); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(101, 19);
			Match(input,INT,Follow._INT_in_synpred29_NPortugolWalker574); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(101, 24);
			Match(input,ID,Follow._ID_in_synpred29_NPortugolWalker577); if (state.failed) return;
			DebugLocation(101, 27);
			PushFollow(Follow._plus_expression_in_synpred29_NPortugolWalker579);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred29_NPortugolWalker_fragment", 47);
			LeaveRule("synpred29_NPortugolWalker_fragment", 47);
			LeaveRule_synpred29_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred29_NPortugolWalker

	partial void EnterRule_synpred30_NPortugolWalker_fragment();
	partial void LeaveRule_synpred30_NPortugolWalker_fragment();

	// $ANTLR start synpred30_NPortugolWalker
	public void synpred30_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		CommonTree p = default(CommonTree);

		EnterRule_synpred30_NPortugolWalker_fragment();
		EnterRule("synpred30_NPortugolWalker_fragment", 48);
		TraceIn("synpred30_NPortugolWalker_fragment", 48);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:102:7: ( ^( ASGN ^( AR i= ID ) p= ID plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:102:7: ^( ASGN ^( AR i= ID ) p= ID plus_expression )
			{
			DebugLocation(102, 7);
			DebugLocation(102, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred30_NPortugolWalker595); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(102, 14);
			DebugLocation(102, 16);
			Match(input,AR,Follow._AR_in_synpred30_NPortugolWalker598); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(102, 20);
			i=(CommonTree)Match(input,ID,Follow._ID_in_synpred30_NPortugolWalker602); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(102, 26);
			p=(CommonTree)Match(input,ID,Follow._ID_in_synpred30_NPortugolWalker607); if (state.failed) return;
			DebugLocation(102, 30);
			PushFollow(Follow._plus_expression_in_synpred30_NPortugolWalker609);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred30_NPortugolWalker_fragment", 48);
			LeaveRule("synpred30_NPortugolWalker_fragment", 48);
			LeaveRule_synpred30_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred30_NPortugolWalker

	partial void EnterRule_synpred31_NPortugolWalker_fragment();
	partial void LeaveRule_synpred31_NPortugolWalker_fragment();

	// $ANTLR start synpred31_NPortugolWalker
	public void synpred31_NPortugolWalker_fragment()
	{
		EnterRule_synpred31_NPortugolWalker_fragment();
		EnterRule("synpred31_NPortugolWalker_fragment", 49);
		TraceIn("synpred31_NPortugolWalker_fragment", 49);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:103:7: ( ^( ASGN ID plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:103:7: ^( ASGN ID plus_expression )
			{
			DebugLocation(103, 7);
			DebugLocation(103, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred31_NPortugolWalker628); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(103, 14);
			Match(input,ID,Follow._ID_in_synpred31_NPortugolWalker630); if (state.failed) return;
			DebugLocation(103, 17);
			PushFollow(Follow._plus_expression_in_synpred31_NPortugolWalker632);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred31_NPortugolWalker_fragment", 49);
			LeaveRule("synpred31_NPortugolWalker_fragment", 49);
			LeaveRule_synpred31_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred31_NPortugolWalker

	partial void EnterRule_synpred32_NPortugolWalker_fragment();
	partial void LeaveRule_synpred32_NPortugolWalker_fragment();

	// $ANTLR start synpred32_NPortugolWalker
	public void synpred32_NPortugolWalker_fragment()
	{
		EnterRule_synpred32_NPortugolWalker_fragment();
		EnterRule("synpred32_NPortugolWalker_fragment", 50);
		TraceIn("synpred32_NPortugolWalker_fragment", 50);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:104:7: ( ^( ASGN ID 'nulo' ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:104:7: ^( ASGN ID 'nulo' )
			{
			DebugLocation(104, 7);
			DebugLocation(104, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred32_NPortugolWalker645); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(104, 14);
			Match(input,ID,Follow._ID_in_synpred32_NPortugolWalker647); if (state.failed) return;
			DebugLocation(104, 17);
			Match(input,75,Follow._75_in_synpred32_NPortugolWalker649); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred32_NPortugolWalker_fragment", 50);
			LeaveRule("synpred32_NPortugolWalker_fragment", 50);
			LeaveRule_synpred32_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred32_NPortugolWalker

	partial void EnterRule_synpred33_NPortugolWalker_fragment();
	partial void LeaveRule_synpred33_NPortugolWalker_fragment();

	// $ANTLR start synpred33_NPortugolWalker
	public void synpred33_NPortugolWalker_fragment()
	{
		EnterRule_synpred33_NPortugolWalker_fragment();
		EnterRule("synpred33_NPortugolWalker_fragment", 51);
		TraceIn("synpred33_NPortugolWalker_fragment", 51);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:105:7: ( ^( ASGN ID 'falso' ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:105:7: ^( ASGN ID 'falso' )
			{
			DebugLocation(105, 7);
			DebugLocation(105, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred33_NPortugolWalker662); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(105, 14);
			Match(input,ID,Follow._ID_in_synpred33_NPortugolWalker664); if (state.failed) return;
			DebugLocation(105, 17);
			Match(input,74,Follow._74_in_synpred33_NPortugolWalker666); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred33_NPortugolWalker_fragment", 51);
			LeaveRule("synpred33_NPortugolWalker_fragment", 51);
			LeaveRule_synpred33_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred33_NPortugolWalker

	partial void EnterRule_synpred34_NPortugolWalker_fragment();
	partial void LeaveRule_synpred34_NPortugolWalker_fragment();

	// $ANTLR start synpred34_NPortugolWalker
	public void synpred34_NPortugolWalker_fragment()
	{
		EnterRule_synpred34_NPortugolWalker_fragment();
		EnterRule("synpred34_NPortugolWalker_fragment", 52);
		TraceIn("synpred34_NPortugolWalker_fragment", 52);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:106:7: ( ^( ASGN ID 'verdadeiro' ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:106:7: ^( ASGN ID 'verdadeiro' )
			{
			DebugLocation(106, 7);
			DebugLocation(106, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred34_NPortugolWalker678); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(106, 14);
			Match(input,ID,Follow._ID_in_synpred34_NPortugolWalker680); if (state.failed) return;
			DebugLocation(106, 17);
			Match(input,76,Follow._76_in_synpred34_NPortugolWalker682); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred34_NPortugolWalker_fragment", 52);
			LeaveRule("synpred34_NPortugolWalker_fragment", 52);
			LeaveRule_synpred34_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred34_NPortugolWalker

	partial void EnterRule_synpred35_NPortugolWalker_fragment();
	partial void LeaveRule_synpred35_NPortugolWalker_fragment();

	// $ANTLR start synpred35_NPortugolWalker
	public void synpred35_NPortugolWalker_fragment()
	{
		CommonTree l = default(CommonTree);
		CommonTree r = default(CommonTree);

		EnterRule_synpred35_NPortugolWalker_fragment();
		EnterRule("synpred35_NPortugolWalker_fragment", 53);
		TraceIn("synpred35_NPortugolWalker_fragment", 53);
		try
		{
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:107:7: ( ^( ASGN ID l= INT r= INT ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:107:7: ^( ASGN ID l= INT r= INT )
			{
			DebugLocation(107, 7);
			DebugLocation(107, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred35_NPortugolWalker700); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(107, 14);
			Match(input,ID,Follow._ID_in_synpred35_NPortugolWalker702); if (state.failed) return;
			DebugLocation(107, 18);
			l=(CommonTree)Match(input,INT,Follow._INT_in_synpred35_NPortugolWalker706); if (state.failed) return;
			DebugLocation(107, 24);
			r=(CommonTree)Match(input,INT,Follow._INT_in_synpred35_NPortugolWalker710); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred35_NPortugolWalker_fragment", 53);
			LeaveRule("synpred35_NPortugolWalker_fragment", 53);
			LeaveRule_synpred35_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred35_NPortugolWalker
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _declare_function_in_compile62 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _FUNC_in_declare_function76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _TYPE_in_declare_function78 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_declare_function81 = new BitSet(new ulong[]{0x110000000UL});
		public static readonly BitSet _function_param_list_in_declare_function83 = new BitSet(new ulong[]{0x110000000UL});
		public static readonly BitSet _SLIST_in_declare_function87 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_declare_function89 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _declare_local_in_statement105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_stat_in_statement110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_stat_in_statement116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_call_in_statement121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assign_var_in_statement127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_stat_in_statement132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _asm_code_in_statement137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PARAM_in_function_param_list157 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_function_param_list161 = new BitSet(new ulong[]{0x20008UL});
		public static readonly BitSet _VAR_in_declare_local180 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_declare_local184 = new BitSet(new ulong[]{0x20008UL});
		public static readonly BitSet _SJMP_in_if_stat202 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _LEXP_in_if_stat205 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logic_expression_in_if_stat207 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SLIST_in_if_stat211 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_if_stat213 = new BitSet(new ulong[]{0x11C14001C0UL});
		public static readonly BitSet _senao_stat_in_if_stat218 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _JMP_in_if_stat227 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _LEXP_in_if_stat230 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logic_expression_in_if_stat232 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SLIST_in_if_stat236 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_if_stat238 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _SLIST_in_senao_stat257 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_senao_stat259 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _LOOP_in_for_stat282 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_for_stat286 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_for_stat290 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SLIST_in_for_stat293 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat295 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _LOOP_in_for_stat306 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_for_stat308 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_for_stat312 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_for_stat316 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SLIST_in_for_stat319 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat321 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _LOOP_in_for_stat331 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_for_stat335 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_for_stat339 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SLIST_in_for_stat342 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat344 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _LOOP_in_for_stat355 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_for_stat357 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_for_stat361 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_for_stat365 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SLIST_in_for_stat368 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat370 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _CALL_in_function_call394 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_function_call396 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _function_arg_list_in_function_call398 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _PCALL_in_property_call419 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_property_call423 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_property_call427 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MCALL_in_method_call452 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_method_call456 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_method_call460 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _function_arg_list_in_method_call462 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _ARG_in_function_arg_list488 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_function_arg_list490 = new BitSet(new ulong[]{0x25802222A4108UL});
		public static readonly BitSet _ASM_in_asm_code506 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STRING_in_asm_code510 = new BitSet(new ulong[]{0x200000008UL});
		public static readonly BitSet _ASGN_in_assign_var551 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var553 = new BitSet(new ulong[]{0x200224000UL});
		public static readonly BitSet _atom_in_assign_var557 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var569 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_assign_var572 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_assign_var574 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_assign_var577 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_assign_var579 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var595 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_assign_var598 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var602 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_assign_var607 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_assign_var609 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var628 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var630 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_assign_var632 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var645 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var647 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_assign_var649 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var662 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var664 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_assign_var666 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var678 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var680 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_assign_var682 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var700 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var702 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_assign_var706 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_assign_var710 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var722 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var724 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _ILIST_in_assign_var727 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_assign_var731 = new BitSet(new ulong[]{0x200008UL});
		public static readonly BitSet _RET_in_return_stat754 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_return_stat756 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _44_in_plus_expression772 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression774 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_plus_expression776 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _46_in_plus_expression784 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression786 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_plus_expression788 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _43_in_plus_expression796 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression798 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_plus_expression800 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _49_in_plus_expression808 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression810 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_plus_expression812 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDEX_in_plus_expression820 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_plus_expression822 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_plus_expression825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDEX_in_plus_expression832 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_plus_expression836 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_plus_expression841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_call_in_plus_expression847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _method_call_in_plus_expression851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_call_in_plus_expression855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_plus_expression859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_logic_expression872 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression874 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression876 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _54_in_logic_expression887 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression889 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression891 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _51_in_logic_expression902 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression904 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression906 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _55_in_logic_expression917 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression919 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression921 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _53_in_logic_expression932 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression934 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression936 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _38_in_logic_expression947 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression949 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression951 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _60_in_logic_expression961 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression963 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression965 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _65_in_logic_expression974 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression976 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression978 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _plus_expression_in_logic_expression990 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_atom1018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_atom1030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOAT_in_atom1042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom1054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOOP_in_synpred18_NPortugolWalker282 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_synpred18_NPortugolWalker286 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_synpred18_NPortugolWalker290 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SLIST_in_synpred18_NPortugolWalker293 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred18_NPortugolWalker295 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _LOOP_in_synpred20_NPortugolWalker306 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_synpred20_NPortugolWalker308 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_synpred20_NPortugolWalker312 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_synpred20_NPortugolWalker316 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SLIST_in_synpred20_NPortugolWalker319 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred20_NPortugolWalker321 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _LOOP_in_synpred22_NPortugolWalker331 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_synpred22_NPortugolWalker335 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_synpred22_NPortugolWalker339 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SLIST_in_synpred22_NPortugolWalker342 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred22_NPortugolWalker344 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _ASGN_in_synpred28_NPortugolWalker551 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred28_NPortugolWalker553 = new BitSet(new ulong[]{0x200224000UL});
		public static readonly BitSet _atom_in_synpred28_NPortugolWalker557 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred29_NPortugolWalker569 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_synpred29_NPortugolWalker572 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_synpred29_NPortugolWalker574 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_synpred29_NPortugolWalker577 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_synpred29_NPortugolWalker579 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred30_NPortugolWalker595 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_synpred30_NPortugolWalker598 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred30_NPortugolWalker602 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_synpred30_NPortugolWalker607 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_synpred30_NPortugolWalker609 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred31_NPortugolWalker628 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred31_NPortugolWalker630 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_synpred31_NPortugolWalker632 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred32_NPortugolWalker645 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred32_NPortugolWalker647 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_synpred32_NPortugolWalker649 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred33_NPortugolWalker662 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred33_NPortugolWalker664 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_synpred33_NPortugolWalker666 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred34_NPortugolWalker678 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred34_NPortugolWalker680 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_synpred34_NPortugolWalker682 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred35_NPortugolWalker700 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred35_NPortugolWalker702 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_synpred35_NPortugolWalker706 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_synpred35_NPortugolWalker710 = new BitSet(new ulong[]{0x8UL});
	}
	#endregion Follow sets
}

} // namespace NPortugol2.Compiler
