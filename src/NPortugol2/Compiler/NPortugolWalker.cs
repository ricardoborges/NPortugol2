//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g 2012-10-15 14:34:24

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System;
using System.Collections;
using NPortugol2.VirtualMachine;
using System.Reflection.Emit;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace NPortugol2.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class NPortugolWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AR", "ARG", "ASGN", "ASM", "CALL", "CHAR", "DEC", "ESC_SEQ", "EXP", "EXPONENT", "FLOAT", "FUNC", "HEX_DIGIT", "ID", "ILIST", "INDEX", "INIT", "INT", "JMP", "LEXP", "LOOP", "MCALL", "NEWLINE", "OCTAL_ESC", "PARAM", "PCALL", "RET", "SJMP", "SLIST", "STRING", "TYPE", "UNICODE_ESC", "VAR", "WS", "'!='", "'#'", "'%'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'..'", "'/'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'['", "']'", "'ate'", "'dec'", "'e'", "'enquanto'", "'entao'", "'fim'", "'funcao'", "'ou'", "'para'", "'repita'", "'retorne'", "'se'", "'senao'", "'variavel'", "'{'", "'}'", "'falso'", "'nulo'", "'verdadeiro'"
	};
	public const int EOF=-1;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int AR=4;
	public const int ARG=5;
	public const int ASGN=6;
	public const int ASM=7;
	public const int CALL=8;
	public const int CHAR=9;
	public const int DEC=10;
	public const int ESC_SEQ=11;
	public const int EXP=12;
	public const int EXPONENT=13;
	public const int FLOAT=14;
	public const int FUNC=15;
	public const int HEX_DIGIT=16;
	public const int ID=17;
	public const int ILIST=18;
	public const int INDEX=19;
	public const int INIT=20;
	public const int INT=21;
	public const int JMP=22;
	public const int LEXP=23;
	public const int LOOP=24;
	public const int MCALL=25;
	public const int NEWLINE=26;
	public const int OCTAL_ESC=27;
	public const int PARAM=28;
	public const int PCALL=29;
	public const int RET=30;
	public const int SJMP=31;
	public const int SLIST=32;
	public const int STRING=33;
	public const int TYPE=34;
	public const int UNICODE_ESC=35;
	public const int VAR=36;
	public const int WS=37;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;

	public NPortugolWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public NPortugolWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return NPortugolWalker.tokenNames; } }
	public override string GrammarFileName { get { return "E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g"; } }


		CodeEmitter emitter = new CodeEmitter();
		
		bool inExpression;
		
		//public Dictionary<int, int> SourceMap { get { return emitter.SourceMap; } }
		
		//public bool DebugInfo {get {return emitter.DebugInfo;} set{emitter.DebugInfo = value;} }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_compile();
	partial void LeaveRule_compile();

	// $ANTLR start "compile"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:30:8: public compile returns [Module module] : ( declare_function )* ;
	[GrammarRule("compile")]
	public Module compile()
	{
		EnterRule_compile();
		EnterRule("compile", 1);
		TraceIn("compile", 1);
		Module module = default(Module);


		try { DebugEnterRule(GrammarFileName, "compile");
		DebugLocation(30, 0);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:30:39: ( ( declare_function )* )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:30:41: ( declare_function )*
			{
			DebugLocation(30, 41);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:30:41: ( declare_function )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==FUNC))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:30:41: declare_function
					{
					DebugLocation(30, 41);
					PushFollow(Follow._declare_function_in_compile62);
					declare_function();
					PopFollow();
					if (state.failed) return module;

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(31, 2);
			if (state.backtracking == 0)
			{
				 return emitter.Module;
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("compile", 1);
			LeaveRule("compile", 1);
			LeaveRule_compile();
		}
		DebugLocation(32, 0);
		} finally { DebugExitRule(GrammarFileName, "compile"); }
		return module;

	}
	// $ANTLR end "compile"

	partial void EnterRule_declare_function();
	partial void LeaveRule_declare_function();

	// $ANTLR start "declare_function"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:34:1: declare_function : ^( FUNC ( TYPE )? ID ( function_param_list )* ^( SLIST ( statement )* ) ) ;
	[GrammarRule("declare_function")]
	private void declare_function()
	{
		EnterRule_declare_function();
		EnterRule("declare_function", 2);
		TraceIn("declare_function", 2);
		CommonTree TYPE1 = default(CommonTree);
		CommonTree ID2 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "declare_function");
		DebugLocation(34, 0);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:34:18: ( ^( FUNC ( TYPE )? ID ( function_param_list )* ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:34:20: ^( FUNC ( TYPE )? ID ( function_param_list )* ^( SLIST ( statement )* ) )
			{
			DebugLocation(34, 20);
			DebugLocation(34, 22);
			Match(input,FUNC,Follow._FUNC_in_declare_function76); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(34, 27);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:34:27: ( TYPE )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==TYPE))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:34:27: TYPE
				{
				DebugLocation(34, 27);
				TYPE1=(CommonTree)Match(input,TYPE,Follow._TYPE_in_declare_function78); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(34, 33);
			ID2=(CommonTree)Match(input,ID,Follow._ID_in_declare_function81); if (state.failed) return;
			DebugLocation(34, 36);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:34:36: ( function_param_list )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==PARAM))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:34:36: function_param_list
					{
					DebugLocation(34, 36);
					PushFollow(Follow._function_param_list_in_declare_function83);
					function_param_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(34, 57);
			DebugLocation(34, 59);
			Match(input,SLIST,Follow._SLIST_in_declare_function87); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(34, 65);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:34:65: ( statement )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if (((LA4_0>=ASGN && LA4_0<=CALL)||LA4_0==JMP||LA4_0==LOOP||(LA4_0>=RET && LA4_0<=SJMP)||LA4_0==VAR))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:34:65: statement
						{
						DebugLocation(34, 65);
						PushFollow(Follow._statement_in_declare_function89);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(35, 2);
			if (state.backtracking == 0)
			{
				emitter.CreateFunction(TYPE1, ID2.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declare_function", 2);
			LeaveRule("declare_function", 2);
			LeaveRule_declare_function();
		}
		DebugLocation(36, 0);
		} finally { DebugExitRule(GrammarFileName, "declare_function"); }
		return;

	}
	// $ANTLR end "declare_function"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:38:1: statement : ( declare_local | if_stat | for_stat | function_call | assign_var | return_stat | asm_code );
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(38, 1);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:38:10: ( declare_local | if_stat | for_stat | function_call | assign_var | return_stat | asm_code )
			int alt5=7;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case VAR:
				{
				alt5 = 1;
				}
				break;
			case JMP:
			case SJMP:
				{
				alt5 = 2;
				}
				break;
			case LOOP:
				{
				alt5 = 3;
				}
				break;
			case CALL:
				{
				alt5 = 4;
				}
				break;
			case ASGN:
				{
				alt5 = 5;
				}
				break;
			case RET:
				{
				alt5 = 6;
				}
				break;
			case ASM:
				{
				alt5 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:38:12: declare_local
				{
				DebugLocation(38, 12);
				PushFollow(Follow._declare_local_in_statement105);
				declare_local();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:39:4: if_stat
				{
				DebugLocation(39, 4);
				PushFollow(Follow._if_stat_in_statement110);
				if_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:40:4: for_stat
				{
				DebugLocation(40, 4);
				PushFollow(Follow._for_stat_in_statement116);
				for_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:41:4: function_call
				{
				DebugLocation(41, 4);
				PushFollow(Follow._function_call_in_statement121);
				function_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:42:4: assign_var
				{
				DebugLocation(42, 4);
				PushFollow(Follow._assign_var_in_statement127);
				assign_var();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:43:4: return_stat
				{
				DebugLocation(43, 4);
				PushFollow(Follow._return_stat_in_statement132);
				return_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:44:4: asm_code
				{
				DebugLocation(44, 4);
				PushFollow(Follow._asm_code_in_statement137);
				asm_code();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(45, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"

	partial void EnterRule_function_param_list();
	partial void LeaveRule_function_param_list();

	// $ANTLR start "function_param_list"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:48:1: function_param_list : ^( PARAM ( param )* ) ;
	[GrammarRule("function_param_list")]
	private void function_param_list()
	{
		EnterRule_function_param_list();
		EnterRule("function_param_list", 4);
		TraceIn("function_param_list", 4);
		try { DebugEnterRule(GrammarFileName, "function_param_list");
		DebugLocation(48, 1);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:49:2: ( ^( PARAM ( param )* ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:49:5: ^( PARAM ( param )* )
			{
			DebugLocation(49, 5);
			DebugLocation(49, 7);
			Match(input,PARAM,Follow._PARAM_in_function_param_list157); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(49, 13);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:49:13: ( param )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==TYPE))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:49:13: param
						{
						DebugLocation(49, 13);
						PushFollow(Follow._param_in_function_param_list159);
						param();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_param_list", 4);
			LeaveRule("function_param_list", 4);
			LeaveRule_function_param_list();
		}
		DebugLocation(50, 1);
		} finally { DebugExitRule(GrammarFileName, "function_param_list"); }
		return;

	}
	// $ANTLR end "function_param_list"

	partial void EnterRule_param();
	partial void LeaveRule_param();

	// $ANTLR start "param"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:52:1: param : ^(t= TYPE i= ID ) ;
	[GrammarRule("param")]
	private void param()
	{
		EnterRule_param();
		EnterRule("param", 5);
		TraceIn("param", 5);
		CommonTree t = default(CommonTree);
		CommonTree i = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "param");
		DebugLocation(52, 75);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:52:7: ( ^(t= TYPE i= ID ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:52:9: ^(t= TYPE i= ID )
			{
			DebugLocation(52, 9);
			DebugLocation(52, 12);
			t=(CommonTree)Match(input,TYPE,Follow._TYPE_in_param177); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(52, 19);
			i=(CommonTree)Match(input,ID,Follow._ID_in_param181); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(52, 24);
			if (state.backtracking == 0)
			{
				emitter.CreateFunctionParams(t.Token, i.Token); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("param", 5);
			LeaveRule("param", 5);
			LeaveRule_param();
		}
		DebugLocation(52, 75);
		} finally { DebugExitRule(GrammarFileName, "param"); }
		return;

	}
	// $ANTLR end "param"

	partial void EnterRule_declare_local();
	partial void LeaveRule_declare_local();

	// $ANTLR start "declare_local"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:55:1: declare_local : ^( VAR t= local_var (i+= ID )* ) ;
	[GrammarRule("declare_local")]
	private void declare_local()
	{
		EnterRule_declare_local();
		EnterRule("declare_local", 6);
		TraceIn("declare_local", 6);
		CommonTree i = default(CommonTree);
		List<CommonTree> list_i = null;
		Type t = default(Type);

		try { DebugEnterRule(GrammarFileName, "declare_local");
		DebugLocation(55, 1);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:56:2: ( ^( VAR t= local_var (i+= ID )* ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:56:4: ^( VAR t= local_var (i+= ID )* )
			{
			DebugLocation(56, 4);
			DebugLocation(56, 6);
			Match(input,VAR,Follow._VAR_in_declare_local196); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(56, 11);
			PushFollow(Follow._local_var_in_declare_local200);
			t=local_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(56, 23);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:56:23: (i+= ID )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==ID))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:56:23: i+= ID
					{
					DebugLocation(56, 23);
					i=(CommonTree)Match(input,ID,Follow._ID_in_declare_local204); if (state.failed) return;
					if (list_i==null) list_i=new List<CommonTree>();
					list_i.Add(i);


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(56, 30);
			if (state.backtracking == 0)
			{
				emitter.DeclareLocal(t, list_i); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declare_local", 6);
			LeaveRule("declare_local", 6);
			LeaveRule_declare_local();
		}
		DebugLocation(57, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_local"); }
		return;

	}
	// $ANTLR end "declare_local"

	partial void EnterRule_local_var();
	partial void LeaveRule_local_var();

	// $ANTLR start "local_var"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:59:1: local_var returns [Type value] : ^(t= TYPE i= ID ) ;
	[GrammarRule("local_var")]
	private Type local_var()
	{
		EnterRule_local_var();
		EnterRule("local_var", 7);
		TraceIn("local_var", 7);
		Type value = default(Type);


		CommonTree t = default(CommonTree);
		CommonTree i = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "local_var");
		DebugLocation(59, 1);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:60:2: ( ^(t= TYPE i= ID ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:61:2: ^(t= TYPE i= ID )
			{
			DebugLocation(61, 2);
			DebugLocation(61, 5);
			t=(CommonTree)Match(input,TYPE,Follow._TYPE_in_local_var228); if (state.failed) return value;

			Match(input, TokenTypes.Down, null); if (state.failed) return value;
			DebugLocation(61, 12);
			i=(CommonTree)Match(input,ID,Follow._ID_in_local_var232); if (state.failed) return value;

			Match(input, TokenTypes.Up, null); if (state.failed) return value;

			DebugLocation(62, 2);
			if (state.backtracking == 0)
			{

						value = emitter.DeclareLocal(t.Token, i.Token); 
					
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("local_var", 7);
			LeaveRule("local_var", 7);
			LeaveRule_local_var();
		}
		DebugLocation(65, 1);
		} finally { DebugExitRule(GrammarFileName, "local_var"); }
		return value;

	}
	// $ANTLR end "local_var"

	partial void EnterRule_if_stat();
	partial void LeaveRule_if_stat();

	// $ANTLR start "if_stat"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:67:1: if_stat : ( ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) ) | ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) ) );
	[GrammarRule("if_stat")]
	private void if_stat()
	{
		EnterRule_if_stat();
		EnterRule("if_stat", 8);
		TraceIn("if_stat", 8);
		try { DebugEnterRule(GrammarFileName, "if_stat");
		DebugLocation(67, 1);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:68:2: ( ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) ) | ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==SJMP))
			{
				alt10 = 1;
			}
			else if ((LA10_0==JMP))
			{
				alt10 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:68:5: ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) )
				{
				DebugLocation(68, 5);
				DebugLocation(68, 7);
				Match(input,SJMP,Follow._SJMP_in_if_stat250); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(68, 12);
				DebugLocation(68, 14);
				Match(input,LEXP,Follow._LEXP_in_if_stat253); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(68, 19);
				PushFollow(Follow._logic_expression_in_if_stat255);
				logic_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(68, 37);
				DebugLocation(68, 39);
				Match(input,SLIST,Follow._SLIST_in_if_stat259); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(68, 45);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:68:45: ( statement )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if (((LA8_0>=ASGN && LA8_0<=CALL)||LA8_0==JMP||LA8_0==LOOP||(LA8_0>=RET && LA8_0<=SJMP)||LA8_0==VAR))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:68:45: statement
						{
						DebugLocation(68, 45);
						PushFollow(Follow._statement_in_if_stat261);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(68, 84);
				PushFollow(Follow._senao_stat_in_if_stat266);
				senao_stat();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:69:5: ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) )
				{
				DebugLocation(69, 5);
				DebugLocation(69, 7);
				Match(input,JMP,Follow._JMP_in_if_stat275); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(69, 11);
				DebugLocation(69, 13);
				Match(input,LEXP,Follow._LEXP_in_if_stat278); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(69, 18);
				PushFollow(Follow._logic_expression_in_if_stat280);
				logic_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(69, 36);
				DebugLocation(69, 38);
				Match(input,SLIST,Follow._SLIST_in_if_stat284); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(69, 44);
					// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:69:44: ( statement )*
					try { DebugEnterSubRule(9);
					while (true)
					{
						int alt9=2;
						try { DebugEnterDecision(9, false);
						int LA9_0 = input.LA(1);

						if (((LA9_0>=ASGN && LA9_0<=CALL)||LA9_0==JMP||LA9_0==LOOP||(LA9_0>=RET && LA9_0<=SJMP)||LA9_0==VAR))
						{
							alt9 = 1;
						}


						} finally { DebugExitDecision(9); }
						switch ( alt9 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:69:44: statement
							{
							DebugLocation(69, 44);
							PushFollow(Follow._statement_in_if_stat286);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop9;
						}
					}

					loop9:
						;

					} finally { DebugExitSubRule(9); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("if_stat", 8);
			LeaveRule("if_stat", 8);
			LeaveRule_if_stat();
		}
		DebugLocation(71, 1);
		} finally { DebugExitRule(GrammarFileName, "if_stat"); }
		return;

	}
	// $ANTLR end "if_stat"

	partial void EnterRule_senao_stat();
	partial void LeaveRule_senao_stat();

	// $ANTLR start "senao_stat"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:73:1: senao_stat : ^( SLIST ( statement )* ) ;
	[GrammarRule("senao_stat")]
	private void senao_stat()
	{
		EnterRule_senao_stat();
		EnterRule("senao_stat", 9);
		TraceIn("senao_stat", 9);
		try { DebugEnterRule(GrammarFileName, "senao_stat");
		DebugLocation(73, 1);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:74:2: ( ^( SLIST ( statement )* ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:74:4: ^( SLIST ( statement )* )
			{
			DebugLocation(74, 4);
			DebugLocation(74, 6);
			Match(input,SLIST,Follow._SLIST_in_senao_stat305); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(74, 12);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:74:12: ( statement )*
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_0 = input.LA(1);

					if (((LA11_0>=ASGN && LA11_0<=CALL)||LA11_0==JMP||LA11_0==LOOP||(LA11_0>=RET && LA11_0<=SJMP)||LA11_0==VAR))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch ( alt11 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:74:12: statement
						{
						DebugLocation(74, 12);
						PushFollow(Follow._statement_in_senao_stat307);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop11;
					}
				}

				loop11:
					;

				} finally { DebugExitSubRule(11); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("senao_stat", 9);
			LeaveRule("senao_stat", 9);
			LeaveRule_senao_stat();
		}
		DebugLocation(76, 1);
		} finally { DebugExitRule(GrammarFileName, "senao_stat"); }
		return;

	}
	// $ANTLR end "senao_stat"

	partial void EnterRule_for_stat();
	partial void LeaveRule_for_stat();

	// $ANTLR start "for_stat"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:79:1: for_stat : ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) ) );
	[GrammarRule("for_stat")]
	private void for_stat()
	{
		EnterRule_for_stat();
		EnterRule("for_stat", 10);
		TraceIn("for_stat", 10);
		CommonTree i = default(CommonTree);
		string a = default(string);

		try { DebugEnterRule(GrammarFileName, "for_stat");
		DebugLocation(79, 1);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:79:9: ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) ) )
			int alt16=4;
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==LOOP))
			{
				int LA16_1 = input.LA(2);

				if ((LA16_1==DOWN))
				{
					int LA16_2 = input.LA(3);

					if ((LA16_2==DEC))
					{
						int LA16_3 = input.LA(4);

						if ((EvaluatePredicate(synpred20_NPortugolWalker_fragment)))
						{
							alt16 = 2;
						}
						else if ((true))
						{
							alt16 = 4;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 16, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA16_2==ASGN))
					{
						int LA16_4 = input.LA(4);

						if ((EvaluatePredicate(synpred18_NPortugolWalker_fragment)))
						{
							alt16 = 1;
						}
						else if ((EvaluatePredicate(synpred22_NPortugolWalker_fragment)))
						{
							alt16 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 16, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 16, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 16, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:79:11: ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) )
				{
				DebugLocation(79, 11);
				DebugLocation(79, 13);
				Match(input,LOOP,Follow._LOOP_in_for_stat330); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(79, 19);
				PushFollow(Follow._assign_var_in_for_stat334);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(79, 32);
				i=(CommonTree)Match(input,INT,Follow._INT_in_for_stat338); if (state.failed) return;
				DebugLocation(79, 37);
				DebugLocation(79, 39);
				Match(input,SLIST,Follow._SLIST_in_for_stat341); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(79, 45);
					// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:79:45: ( statement )*
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if (((LA12_0>=ASGN && LA12_0<=CALL)||LA12_0==JMP||LA12_0==LOOP||(LA12_0>=RET && LA12_0<=SJMP)||LA12_0==VAR))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch ( alt12 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:79:45: statement
							{
							DebugLocation(79, 45);
							PushFollow(Follow._statement_in_for_stat343);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop12;
						}
					}

					loop12:
						;

					} finally { DebugExitSubRule(12); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:80:4: ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) )
				{
				DebugLocation(80, 4);
				DebugLocation(80, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat354); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(80, 11);
				Match(input,DEC,Follow._DEC_in_for_stat356); if (state.failed) return;
				DebugLocation(80, 16);
				PushFollow(Follow._assign_var_in_for_stat360);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(80, 29);
				i=(CommonTree)Match(input,INT,Follow._INT_in_for_stat364); if (state.failed) return;
				DebugLocation(80, 34);
				DebugLocation(80, 36);
				Match(input,SLIST,Follow._SLIST_in_for_stat367); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(80, 42);
					// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:80:42: ( statement )*
					try { DebugEnterSubRule(13);
					while (true)
					{
						int alt13=2;
						try { DebugEnterDecision(13, false);
						int LA13_0 = input.LA(1);

						if (((LA13_0>=ASGN && LA13_0<=CALL)||LA13_0==JMP||LA13_0==LOOP||(LA13_0>=RET && LA13_0<=SJMP)||LA13_0==VAR))
						{
							alt13 = 1;
						}


						} finally { DebugExitDecision(13); }
						switch ( alt13 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:80:42: statement
							{
							DebugLocation(80, 42);
							PushFollow(Follow._statement_in_for_stat369);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop13;
						}
					}

					loop13:
						;

					} finally { DebugExitSubRule(13); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:81:4: ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) )
				{
				DebugLocation(81, 4);
				DebugLocation(81, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat379); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(81, 12);
				PushFollow(Follow._assign_var_in_for_stat383);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(81, 25);
				i=(CommonTree)Match(input,ID,Follow._ID_in_for_stat387); if (state.failed) return;
				DebugLocation(81, 29);
				DebugLocation(81, 31);
				Match(input,SLIST,Follow._SLIST_in_for_stat390); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(81, 37);
					// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:81:37: ( statement )*
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if (((LA14_0>=ASGN && LA14_0<=CALL)||LA14_0==JMP||LA14_0==LOOP||(LA14_0>=RET && LA14_0<=SJMP)||LA14_0==VAR))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch ( alt14 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:81:37: statement
							{
							DebugLocation(81, 37);
							PushFollow(Follow._statement_in_for_stat392);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop14;
						}
					}

					loop14:
						;

					} finally { DebugExitSubRule(14); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:82:4: ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) )
				{
				DebugLocation(82, 4);
				DebugLocation(82, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat403); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(82, 11);
				Match(input,DEC,Follow._DEC_in_for_stat405); if (state.failed) return;
				DebugLocation(82, 16);
				PushFollow(Follow._assign_var_in_for_stat409);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(82, 29);
				i=(CommonTree)Match(input,ID,Follow._ID_in_for_stat413); if (state.failed) return;
				DebugLocation(82, 33);
				DebugLocation(82, 35);
				Match(input,SLIST,Follow._SLIST_in_for_stat416); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(82, 41);
					// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:82:41: ( statement )*
					try { DebugEnterSubRule(15);
					while (true)
					{
						int alt15=2;
						try { DebugEnterDecision(15, false);
						int LA15_0 = input.LA(1);

						if (((LA15_0>=ASGN && LA15_0<=CALL)||LA15_0==JMP||LA15_0==LOOP||(LA15_0>=RET && LA15_0<=SJMP)||LA15_0==VAR))
						{
							alt15 = 1;
						}


						} finally { DebugExitDecision(15); }
						switch ( alt15 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:82:41: statement
							{
							DebugLocation(82, 41);
							PushFollow(Follow._statement_in_for_stat418);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop15;
						}
					}

					loop15:
						;

					} finally { DebugExitSubRule(15); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_stat", 10);
			LeaveRule("for_stat", 10);
			LeaveRule_for_stat();
		}
		DebugLocation(83, 1);
		} finally { DebugExitRule(GrammarFileName, "for_stat"); }
		return;

	}
	// $ANTLR end "for_stat"

	partial void EnterRule_function_call();
	partial void LeaveRule_function_call();

	// $ANTLR start "function_call"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:85:1: function_call : ^( CALL ID ( function_arg_list )* ) ;
	[GrammarRule("function_call")]
	private void function_call()
	{
		EnterRule_function_call();
		EnterRule("function_call", 11);
		TraceIn("function_call", 11);
		try { DebugEnterRule(GrammarFileName, "function_call");
		DebugLocation(85, 1);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:86:2: ( ^( CALL ID ( function_arg_list )* ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:86:5: ^( CALL ID ( function_arg_list )* )
			{
			DebugLocation(86, 5);
			DebugLocation(86, 7);
			Match(input,CALL,Follow._CALL_in_function_call442); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(86, 12);
			Match(input,ID,Follow._ID_in_function_call444); if (state.failed) return;
			DebugLocation(86, 15);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:86:15: ( function_arg_list )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==ARG))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:86:15: function_arg_list
					{
					DebugLocation(86, 15);
					PushFollow(Follow._function_arg_list_in_function_call446);
					function_arg_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_call", 11);
			LeaveRule("function_call", 11);
			LeaveRule_function_call();
		}
		DebugLocation(88, 1);
		} finally { DebugExitRule(GrammarFileName, "function_call"); }
		return;

	}
	// $ANTLR end "function_call"

	partial void EnterRule_property_call();
	partial void LeaveRule_property_call();

	// $ANTLR start "property_call"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:90:1: property_call : ^( PCALL o= ID p= ID ) ;
	[GrammarRule("property_call")]
	private void property_call()
	{
		EnterRule_property_call();
		EnterRule("property_call", 12);
		TraceIn("property_call", 12);
		CommonTree o = default(CommonTree);
		CommonTree p = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "property_call");
		DebugLocation(90, 1);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:91:2: ( ^( PCALL o= ID p= ID ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:91:5: ^( PCALL o= ID p= ID )
			{
			DebugLocation(91, 5);
			DebugLocation(91, 7);
			Match(input,PCALL,Follow._PCALL_in_property_call467); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(91, 14);
			o=(CommonTree)Match(input,ID,Follow._ID_in_property_call471); if (state.failed) return;
			DebugLocation(91, 19);
			p=(CommonTree)Match(input,ID,Follow._ID_in_property_call475); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("property_call", 12);
			LeaveRule("property_call", 12);
			LeaveRule_property_call();
		}
		DebugLocation(93, 1);
		} finally { DebugExitRule(GrammarFileName, "property_call"); }
		return;

	}
	// $ANTLR end "property_call"

	partial void EnterRule_method_call();
	partial void LeaveRule_method_call();

	// $ANTLR start "method_call"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:95:1: method_call : ^( MCALL o= ID p= ID ( function_arg_list )* ) ;
	[GrammarRule("method_call")]
	private void method_call()
	{
		EnterRule_method_call();
		EnterRule("method_call", 13);
		TraceIn("method_call", 13);
		CommonTree o = default(CommonTree);
		CommonTree p = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "method_call");
		DebugLocation(95, 1);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:96:2: ( ^( MCALL o= ID p= ID ( function_arg_list )* ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:96:5: ^( MCALL o= ID p= ID ( function_arg_list )* )
			{
			DebugLocation(96, 5);
			DebugLocation(96, 7);
			Match(input,MCALL,Follow._MCALL_in_method_call500); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(96, 14);
			o=(CommonTree)Match(input,ID,Follow._ID_in_method_call504); if (state.failed) return;
			DebugLocation(96, 19);
			p=(CommonTree)Match(input,ID,Follow._ID_in_method_call508); if (state.failed) return;
			DebugLocation(96, 23);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:96:23: ( function_arg_list )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==ARG))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:96:23: function_arg_list
					{
					DebugLocation(96, 23);
					PushFollow(Follow._function_arg_list_in_method_call510);
					function_arg_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("method_call", 13);
			LeaveRule("method_call", 13);
			LeaveRule_method_call();
		}
		DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "method_call"); }
		return;

	}
	// $ANTLR end "method_call"

	partial void EnterRule_function_arg_list();
	partial void LeaveRule_function_arg_list();

	// $ANTLR start "function_arg_list"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:100:1: function_arg_list : ^( ARG ( plus_expression )* ) ;
	[GrammarRule("function_arg_list")]
	private void function_arg_list()
	{
		EnterRule_function_arg_list();
		EnterRule("function_arg_list", 14);
		TraceIn("function_arg_list", 14);
		try { DebugEnterRule(GrammarFileName, "function_arg_list");
		DebugLocation(100, 1);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:102:2: ( ^( ARG ( plus_expression )* ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:102:4: ^( ARG ( plus_expression )* )
			{
			DebugLocation(102, 4);
			DebugLocation(102, 6);
			Match(input,ARG,Follow._ARG_in_function_arg_list536); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(102, 10);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:102:10: ( plus_expression )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==CALL||LA19_0==FLOAT||LA19_0==ID||LA19_0==INDEX||LA19_0==INT||LA19_0==MCALL||LA19_0==PCALL||LA19_0==STRING||(LA19_0>=43 && LA19_0<=44)||LA19_0==46||LA19_0==49))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:102:10: plus_expression
						{
						DebugLocation(102, 10);
						PushFollow(Follow._plus_expression_in_function_arg_list538);
						plus_expression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_arg_list", 14);
			LeaveRule("function_arg_list", 14);
			LeaveRule_function_arg_list();
		}
		DebugLocation(103, 1);
		} finally { DebugExitRule(GrammarFileName, "function_arg_list"); }
		return;

	}
	// $ANTLR end "function_arg_list"

	partial void EnterRule_asm_code();
	partial void LeaveRule_asm_code();

	// $ANTLR start "asm_code"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:106:1: asm_code : ^( ASM (s+= STRING )* ) ;
	[GrammarRule("asm_code")]
	private void asm_code()
	{
		EnterRule_asm_code();
		EnterRule("asm_code", 15);
		TraceIn("asm_code", 15);
		CommonTree s = default(CommonTree);
		List<CommonTree> list_s = null;

		try { DebugEnterRule(GrammarFileName, "asm_code");
		DebugLocation(106, 8);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:106:9: ( ^( ASM (s+= STRING )* ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:106:11: ^( ASM (s+= STRING )* )
			{
			DebugLocation(106, 11);
			DebugLocation(106, 13);
			Match(input,ASM,Follow._ASM_in_asm_code554); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(106, 18);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:106:18: (s+= STRING )*
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_0 = input.LA(1);

					if ((LA20_0==STRING))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch ( alt20 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:106:18: s+= STRING
						{
						DebugLocation(106, 18);
						s=(CommonTree)Match(input,STRING,Follow._STRING_in_asm_code558); if (state.failed) return;
						if (list_s==null) list_s=new List<CommonTree>();
						list_s.Add(s);


						}
						break;

					default:
						goto loop20;
					}
				}

				loop20:
					;

				} finally { DebugExitSubRule(20); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("asm_code", 15);
			LeaveRule("asm_code", 15);
			LeaveRule_asm_code();
		}
		DebugLocation(108, 8);
		} finally { DebugExitRule(GrammarFileName, "asm_code"); }
		return;

	}
	// $ANTLR end "asm_code"

	partial void EnterRule_assign_var();
	partial void LeaveRule_assign_var();

	// $ANTLR start "assign_var"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:111:1: assign_var returns [string id] : ( ^( ASGN ID a= atom ) | ^( ASGN ^( AR INT ) ID plus_expression ) | ^( ASGN ^( AR i= ID ) p= ID plus_expression ) | ^( ASGN ID plus_expression ) | ^( ASGN ID 'nulo' ) | ^( ASGN ID 'falso' ) | ^( ASGN ID 'verdadeiro' ) | ^( ASGN ID l= INT r= INT ) | ^( ASGN ID ^( ILIST (i= INT )* ) ) );
	[GrammarRule("assign_var")]
	private string assign_var()
	{
		EnterRule_assign_var();
		EnterRule("assign_var", 16);
		TraceIn("assign_var", 16);
		string id = default(string);


		CommonTree i = default(CommonTree);
		CommonTree p = default(CommonTree);
		CommonTree l = default(CommonTree);
		CommonTree r = default(CommonTree);
		object a = default(object);

		try { DebugEnterRule(GrammarFileName, "assign_var");
		DebugLocation(111, 4);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:112:5: ( ^( ASGN ID a= atom ) | ^( ASGN ^( AR INT ) ID plus_expression ) | ^( ASGN ^( AR i= ID ) p= ID plus_expression ) | ^( ASGN ID plus_expression ) | ^( ASGN ID 'nulo' ) | ^( ASGN ID 'falso' ) | ^( ASGN ID 'verdadeiro' ) | ^( ASGN ID l= INT r= INT ) | ^( ASGN ID ^( ILIST (i= INT )* ) ) )
			int alt22=9;
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==ASGN))
			{
				int LA22_1 = input.LA(2);

				if ((LA22_1==DOWN))
				{
					int LA22_2 = input.LA(3);

					if ((LA22_2==ID))
					{
						int LA22_3 = input.LA(4);

						if ((EvaluatePredicate(synpred28_NPortugolWalker_fragment)))
						{
							alt22 = 1;
						}
						else if ((EvaluatePredicate(synpred31_NPortugolWalker_fragment)))
						{
							alt22 = 4;
						}
						else if ((EvaluatePredicate(synpred32_NPortugolWalker_fragment)))
						{
							alt22 = 5;
						}
						else if ((EvaluatePredicate(synpred33_NPortugolWalker_fragment)))
						{
							alt22 = 6;
						}
						else if ((EvaluatePredicate(synpred34_NPortugolWalker_fragment)))
						{
							alt22 = 7;
						}
						else if ((EvaluatePredicate(synpred35_NPortugolWalker_fragment)))
						{
							alt22 = 8;
						}
						else if ((true))
						{
							alt22 = 9;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return id;}
							NoViableAltException nvae = new NoViableAltException("", 22, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA22_2==AR))
					{
						int LA22_4 = input.LA(4);

						if ((EvaluatePredicate(synpred29_NPortugolWalker_fragment)))
						{
							alt22 = 2;
						}
						else if ((EvaluatePredicate(synpred30_NPortugolWalker_fragment)))
						{
							alt22 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return id;}
							NoViableAltException nvae = new NoViableAltException("", 22, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return id;}
						NoViableAltException nvae = new NoViableAltException("", 22, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return id;}
					NoViableAltException nvae = new NoViableAltException("", 22, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return id;}
				NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:113:7: ^( ASGN ID a= atom )
				{
				DebugLocation(113, 7);
				DebugLocation(113, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var599); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(113, 14);
				Match(input,ID,Follow._ID_in_assign_var601); if (state.failed) return id;
				DebugLocation(113, 18);
				PushFollow(Follow._atom_in_assign_var605);
				a=atom();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:114:7: ^( ASGN ^( AR INT ) ID plus_expression )
				{
				DebugLocation(114, 7);
				DebugLocation(114, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var617); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(114, 14);
				DebugLocation(114, 16);
				Match(input,AR,Follow._AR_in_assign_var620); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(114, 19);
				Match(input,INT,Follow._INT_in_assign_var622); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(114, 24);
				Match(input,ID,Follow._ID_in_assign_var625); if (state.failed) return id;
				DebugLocation(114, 27);
				PushFollow(Follow._plus_expression_in_assign_var627);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:115:7: ^( ASGN ^( AR i= ID ) p= ID plus_expression )
				{
				DebugLocation(115, 7);
				DebugLocation(115, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var643); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(115, 14);
				DebugLocation(115, 16);
				Match(input,AR,Follow._AR_in_assign_var646); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(115, 20);
				i=(CommonTree)Match(input,ID,Follow._ID_in_assign_var650); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(115, 26);
				p=(CommonTree)Match(input,ID,Follow._ID_in_assign_var655); if (state.failed) return id;
				DebugLocation(115, 30);
				PushFollow(Follow._plus_expression_in_assign_var657);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:116:7: ^( ASGN ID plus_expression )
				{
				DebugLocation(116, 7);
				DebugLocation(116, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var676); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(116, 14);
				Match(input,ID,Follow._ID_in_assign_var678); if (state.failed) return id;
				DebugLocation(116, 17);
				PushFollow(Follow._plus_expression_in_assign_var680);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:117:7: ^( ASGN ID 'nulo' )
				{
				DebugLocation(117, 7);
				DebugLocation(117, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var693); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(117, 14);
				Match(input,ID,Follow._ID_in_assign_var695); if (state.failed) return id;
				DebugLocation(117, 17);
				Match(input,75,Follow._75_in_assign_var697); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:118:7: ^( ASGN ID 'falso' )
				{
				DebugLocation(118, 7);
				DebugLocation(118, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var710); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(118, 14);
				Match(input,ID,Follow._ID_in_assign_var712); if (state.failed) return id;
				DebugLocation(118, 17);
				Match(input,74,Follow._74_in_assign_var714); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:119:7: ^( ASGN ID 'verdadeiro' )
				{
				DebugLocation(119, 7);
				DebugLocation(119, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var726); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(119, 14);
				Match(input,ID,Follow._ID_in_assign_var728); if (state.failed) return id;
				DebugLocation(119, 17);
				Match(input,76,Follow._76_in_assign_var730); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:120:7: ^( ASGN ID l= INT r= INT )
				{
				DebugLocation(120, 7);
				DebugLocation(120, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var748); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(120, 14);
				Match(input,ID,Follow._ID_in_assign_var750); if (state.failed) return id;
				DebugLocation(120, 18);
				l=(CommonTree)Match(input,INT,Follow._INT_in_assign_var754); if (state.failed) return id;
				DebugLocation(120, 24);
				r=(CommonTree)Match(input,INT,Follow._INT_in_assign_var758); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:121:7: ^( ASGN ID ^( ILIST (i= INT )* ) )
				{
				DebugLocation(121, 7);
				DebugLocation(121, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var770); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(121, 14);
				Match(input,ID,Follow._ID_in_assign_var772); if (state.failed) return id;
				DebugLocation(121, 17);
				DebugLocation(121, 19);
				Match(input,ILIST,Follow._ILIST_in_assign_var775); if (state.failed) return id;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return id;
					DebugLocation(121, 26);
					// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:121:26: (i= INT )*
					try { DebugEnterSubRule(21);
					while (true)
					{
						int alt21=2;
						try { DebugEnterDecision(21, false);
						int LA21_0 = input.LA(1);

						if ((LA21_0==INT))
						{
							alt21 = 1;
						}


						} finally { DebugExitDecision(21); }
						switch ( alt21 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:121:26: i= INT
							{
							DebugLocation(121, 26);
							i=(CommonTree)Match(input,INT,Follow._INT_in_assign_var779); if (state.failed) return id;

							}
							break;

						default:
							goto loop21;
						}
					}

					loop21:
						;

					} finally { DebugExitSubRule(21); }


					Match(input, TokenTypes.Up, null); if (state.failed) return id;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return id;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assign_var", 16);
			LeaveRule("assign_var", 16);
			LeaveRule_assign_var();
		}
		DebugLocation(122, 4);
		} finally { DebugExitRule(GrammarFileName, "assign_var"); }
		return id;

	}
	// $ANTLR end "assign_var"

	partial void EnterRule_return_stat();
	partial void LeaveRule_return_stat();

	// $ANTLR start "return_stat"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:124:1: return_stat : ^( RET plus_expression ) ;
	[GrammarRule("return_stat")]
	private void return_stat()
	{
		EnterRule_return_stat();
		EnterRule("return_stat", 17);
		TraceIn("return_stat", 17);
		try { DebugEnterRule(GrammarFileName, "return_stat");
		DebugLocation(124, 1);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:125:2: ( ^( RET plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:125:5: ^( RET plus_expression )
			{
			DebugLocation(125, 5);
			DebugLocation(125, 7);
			Match(input,RET,Follow._RET_in_return_stat802); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(125, 11);
			PushFollow(Follow._plus_expression_in_return_stat804);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(125, 28);
			if (state.backtracking == 0)
			{
				emitter.Emit(OpCodes.Ret);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("return_stat", 17);
			LeaveRule("return_stat", 17);
			LeaveRule_return_stat();
		}
		DebugLocation(126, 1);
		} finally { DebugExitRule(GrammarFileName, "return_stat"); }
		return;

	}
	// $ANTLR end "return_stat"

	partial void EnterRule_plus_expression();
	partial void LeaveRule_plus_expression();

	// $ANTLR start "plus_expression"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:131:1: plus_expression : ( ^( '+' plus_expression plus_expression ) | ^( '-' plus_expression plus_expression ) | ^( '*' plus_expression plus_expression ) | ^( '/' plus_expression plus_expression ) | ^( INDEX INT ) ID | ^( INDEX i2= ID ) i1= ID | function_call | method_call | property_call | atom );
	[GrammarRule("plus_expression")]
	private void plus_expression()
	{
		EnterRule_plus_expression();
		EnterRule("plus_expression", 18);
		TraceIn("plus_expression", 18);
		CommonTree i2 = default(CommonTree);
		CommonTree i1 = default(CommonTree);

		 inExpression = true; 
		try { DebugEnterRule(GrammarFileName, "plus_expression");
		DebugLocation(131, 0);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:134:3: ( ^( '+' plus_expression plus_expression ) | ^( '-' plus_expression plus_expression ) | ^( '*' plus_expression plus_expression ) | ^( '/' plus_expression plus_expression ) | ^( INDEX INT ) ID | ^( INDEX i2= ID ) i1= ID | function_call | method_call | property_call | atom )
			int alt23=10;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case 44:
				{
				alt23 = 1;
				}
				break;
			case 46:
				{
				alt23 = 2;
				}
				break;
			case 43:
				{
				alt23 = 3;
				}
				break;
			case 49:
				{
				alt23 = 4;
				}
				break;
			case INDEX:
				{
				int LA23_5 = input.LA(2);

				if ((LA23_5==DOWN))
				{
					int LA23_13 = input.LA(3);

					if ((LA23_13==INT))
					{
						alt23 = 5;
					}
					else if ((LA23_13==ID))
					{
						alt23 = 6;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 23, 13, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 23, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CALL:
				{
				alt23 = 7;
				}
				break;
			case MCALL:
				{
				alt23 = 8;
				}
				break;
			case PCALL:
				{
				alt23 = 9;
				}
				break;
			case FLOAT:
			case ID:
			case INT:
			case STRING:
				{
				alt23 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:134:3: ^( '+' plus_expression plus_expression )
				{
				DebugLocation(134, 3);
				DebugLocation(134, 5);
				Match(input,44,Follow._44_in_plus_expression831); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(134, 9);
				PushFollow(Follow._plus_expression_in_plus_expression833);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(134, 25);
				PushFollow(Follow._plus_expression_in_plus_expression835);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(134, 42);
				if (state.backtracking == 0)
				{
					emitter.Emit(OpCodes.Add);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:135:3: ^( '-' plus_expression plus_expression )
				{
				DebugLocation(135, 3);
				DebugLocation(135, 5);
				Match(input,46,Follow._46_in_plus_expression843); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(135, 9);
				PushFollow(Follow._plus_expression_in_plus_expression845);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(135, 25);
				PushFollow(Follow._plus_expression_in_plus_expression847);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(135, 42);
				if (state.backtracking == 0)
				{
					emitter.Emit(OpCodes.Sub);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:136:3: ^( '*' plus_expression plus_expression )
				{
				DebugLocation(136, 3);
				DebugLocation(136, 5);
				Match(input,43,Follow._43_in_plus_expression855); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(136, 9);
				PushFollow(Follow._plus_expression_in_plus_expression857);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(136, 25);
				PushFollow(Follow._plus_expression_in_plus_expression859);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(136, 42);
				if (state.backtracking == 0)
				{
					emitter.Emit(OpCodes.Mul);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:137:3: ^( '/' plus_expression plus_expression )
				{
				DebugLocation(137, 3);
				DebugLocation(137, 5);
				Match(input,49,Follow._49_in_plus_expression867); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(137, 9);
				PushFollow(Follow._plus_expression_in_plus_expression869);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(137, 25);
				PushFollow(Follow._plus_expression_in_plus_expression871);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(137, 42);
				if (state.backtracking == 0)
				{
					emitter.Emit(OpCodes.Div);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:138:3: ^( INDEX INT ) ID
				{
				DebugLocation(138, 3);
				DebugLocation(138, 5);
				Match(input,INDEX,Follow._INDEX_in_plus_expression879); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(138, 11);
				Match(input,INT,Follow._INT_in_plus_expression881); if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(138, 16);
				Match(input,ID,Follow._ID_in_plus_expression884); if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:139:3: ^( INDEX i2= ID ) i1= ID
				{
				DebugLocation(139, 3);
				DebugLocation(139, 5);
				Match(input,INDEX,Follow._INDEX_in_plus_expression891); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(139, 13);
				i2=(CommonTree)Match(input,ID,Follow._ID_in_plus_expression895); if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(139, 20);
				i1=(CommonTree)Match(input,ID,Follow._ID_in_plus_expression900); if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:140:3: function_call
				{
				DebugLocation(140, 3);
				PushFollow(Follow._function_call_in_plus_expression906);
				function_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:141:3: method_call
				{
				DebugLocation(141, 3);
				PushFollow(Follow._method_call_in_plus_expression910);
				method_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:142:3: property_call
				{
				DebugLocation(142, 3);
				PushFollow(Follow._property_call_in_plus_expression914);
				property_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:143:3: atom
				{
				DebugLocation(143, 3);
				PushFollow(Follow._atom_in_plus_expression918);
				atom();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			if (state.backtracking == 0)
			{
				 inExpression = false; 
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("plus_expression", 18);
			LeaveRule("plus_expression", 18);
			LeaveRule_plus_expression();
		}
		DebugLocation(144, 0);
		} finally { DebugExitRule(GrammarFileName, "plus_expression"); }
		return;

	}
	// $ANTLR end "plus_expression"

	partial void EnterRule_logic_expression();
	partial void LeaveRule_logic_expression();

	// $ANTLR start "logic_expression"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:146:1: logic_expression : ( ^( '<' plus_expression plus_expression ) | ^( '>' plus_expression plus_expression ) | ^( '<=' plus_expression plus_expression ) | ^( '>=' plus_expression plus_expression ) | ^( '==' plus_expression plus_expression ) | ^( '!=' plus_expression plus_expression ) | ^( 'e' plus_expression plus_expression ) | ^( 'ou' plus_expression plus_expression ) | plus_expression );
	[GrammarRule("logic_expression")]
	private void logic_expression()
	{
		EnterRule_logic_expression();
		EnterRule("logic_expression", 19);
		TraceIn("logic_expression", 19);
		try { DebugEnterRule(GrammarFileName, "logic_expression");
		DebugLocation(146, 1);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:147:2: ( ^( '<' plus_expression plus_expression ) | ^( '>' plus_expression plus_expression ) | ^( '<=' plus_expression plus_expression ) | ^( '>=' plus_expression plus_expression ) | ^( '==' plus_expression plus_expression ) | ^( '!=' plus_expression plus_expression ) | ^( 'e' plus_expression plus_expression ) | ^( 'ou' plus_expression plus_expression ) | plus_expression )
			int alt24=9;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case 50:
				{
				alt24 = 1;
				}
				break;
			case 54:
				{
				alt24 = 2;
				}
				break;
			case 51:
				{
				alt24 = 3;
				}
				break;
			case 55:
				{
				alt24 = 4;
				}
				break;
			case 53:
				{
				alt24 = 5;
				}
				break;
			case 38:
				{
				alt24 = 6;
				}
				break;
			case 60:
				{
				alt24 = 7;
				}
				break;
			case 65:
				{
				alt24 = 8;
				}
				break;
			case CALL:
			case FLOAT:
			case ID:
			case INDEX:
			case INT:
			case MCALL:
			case PCALL:
			case STRING:
			case 43:
			case 44:
			case 46:
			case 49:
				{
				alt24 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:147:6: ^( '<' plus_expression plus_expression )
				{
				DebugLocation(147, 6);
				DebugLocation(147, 8);
				Match(input,50,Follow._50_in_logic_expression931); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(147, 12);
				PushFollow(Follow._plus_expression_in_logic_expression933);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(147, 28);
				PushFollow(Follow._plus_expression_in_logic_expression935);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:148:6: ^( '>' plus_expression plus_expression )
				{
				DebugLocation(148, 6);
				DebugLocation(148, 8);
				Match(input,54,Follow._54_in_logic_expression946); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(148, 12);
				PushFollow(Follow._plus_expression_in_logic_expression948);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(148, 28);
				PushFollow(Follow._plus_expression_in_logic_expression950);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:149:6: ^( '<=' plus_expression plus_expression )
				{
				DebugLocation(149, 6);
				DebugLocation(149, 8);
				Match(input,51,Follow._51_in_logic_expression961); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(149, 13);
				PushFollow(Follow._plus_expression_in_logic_expression963);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(149, 29);
				PushFollow(Follow._plus_expression_in_logic_expression965);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:150:6: ^( '>=' plus_expression plus_expression )
				{
				DebugLocation(150, 6);
				DebugLocation(150, 8);
				Match(input,55,Follow._55_in_logic_expression976); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(150, 13);
				PushFollow(Follow._plus_expression_in_logic_expression978);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(150, 29);
				PushFollow(Follow._plus_expression_in_logic_expression980);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:151:6: ^( '==' plus_expression plus_expression )
				{
				DebugLocation(151, 6);
				DebugLocation(151, 8);
				Match(input,53,Follow._53_in_logic_expression991); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(151, 13);
				PushFollow(Follow._plus_expression_in_logic_expression993);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(151, 29);
				PushFollow(Follow._plus_expression_in_logic_expression995);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:152:6: ^( '!=' plus_expression plus_expression )
				{
				DebugLocation(152, 6);
				DebugLocation(152, 8);
				Match(input,38,Follow._38_in_logic_expression1006); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(152, 13);
				PushFollow(Follow._plus_expression_in_logic_expression1008);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(152, 29);
				PushFollow(Follow._plus_expression_in_logic_expression1010);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:153:6: ^( 'e' plus_expression plus_expression )
				{
				DebugLocation(153, 6);
				DebugLocation(153, 8);
				Match(input,60,Follow._60_in_logic_expression1020); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(153, 12);
				PushFollow(Follow._plus_expression_in_logic_expression1022);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(153, 28);
				PushFollow(Follow._plus_expression_in_logic_expression1024);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:154:6: ^( 'ou' plus_expression plus_expression )
				{
				DebugLocation(154, 6);
				DebugLocation(154, 8);
				Match(input,65,Follow._65_in_logic_expression1033); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(154, 13);
				PushFollow(Follow._plus_expression_in_logic_expression1035);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(154, 29);
				PushFollow(Follow._plus_expression_in_logic_expression1037);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:155:4: plus_expression
				{
				DebugLocation(155, 4);
				PushFollow(Follow._plus_expression_in_logic_expression1049);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logic_expression", 19);
			LeaveRule("logic_expression", 19);
			LeaveRule_logic_expression();
		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "logic_expression"); }
		return;

	}
	// $ANTLR end "logic_expression"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();

	// $ANTLR start "atom"
	// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:160:1: atom returns [object value] : (a= ID |a= INT |a= FLOAT |a= STRING );
	[GrammarRule("atom")]
	private object atom()
	{
		EnterRule_atom();
		EnterRule("atom", 20);
		TraceIn("atom", 20);
		object value = default(object);


		CommonTree a = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(160, 4);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:160:27: (a= ID |a= INT |a= FLOAT |a= STRING )
			int alt25=4;
			try { DebugEnterDecision(25, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt25 = 1;
				}
				break;
			case INT:
				{
				alt25 = 2;
				}
				break;
			case FLOAT:
				{
				alt25 = 3;
				}
				break;
			case STRING:
				{
				alt25 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:161:7: a= ID
				{
				DebugLocation(161, 8);
				a=(CommonTree)Match(input,ID,Follow._ID_in_atom1077); if (state.failed) return value;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:162:7: a= INT
				{
				DebugLocation(162, 8);
				a=(CommonTree)Match(input,INT,Follow._INT_in_atom1089); if (state.failed) return value;
				DebugLocation(162, 13);
				if (state.backtracking == 0)
				{
					value = int.Parse((a!=null?a.Text:null)); if (inExpression) emitter.EmitLdcI4((int)value, a.Token);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:163:7: a= FLOAT
				{
				DebugLocation(163, 8);
				a=(CommonTree)Match(input,FLOAT,Follow._FLOAT_in_atom1101); if (state.failed) return value;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:164:7: a= STRING
				{
				DebugLocation(164, 8);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_atom1113); if (state.failed) return value;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("atom", 20);
			LeaveRule("atom", 20);
			LeaveRule_atom();
		}
		DebugLocation(165, 4);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return value;

	}
	// $ANTLR end "atom"

	partial void EnterRule_synpred18_NPortugolWalker_fragment();
	partial void LeaveRule_synpred18_NPortugolWalker_fragment();

	// $ANTLR start synpred18_NPortugolWalker
	public void synpred18_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred18_NPortugolWalker_fragment();
		EnterRule("synpred18_NPortugolWalker_fragment", 38);
		TraceIn("synpred18_NPortugolWalker_fragment", 38);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:79:11: ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:79:11: ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) )
			{
			DebugLocation(79, 11);
			DebugLocation(79, 13);
			Match(input,LOOP,Follow._LOOP_in_synpred18_NPortugolWalker330); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(79, 19);
			PushFollow(Follow._assign_var_in_synpred18_NPortugolWalker334);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(79, 32);
			i=(CommonTree)Match(input,INT,Follow._INT_in_synpred18_NPortugolWalker338); if (state.failed) return;
			DebugLocation(79, 37);
			DebugLocation(79, 39);
			Match(input,SLIST,Follow._SLIST_in_synpred18_NPortugolWalker341); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(79, 45);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:79:45: ( statement )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if (((LA27_0>=ASGN && LA27_0<=CALL)||LA27_0==JMP||LA27_0==LOOP||(LA27_0>=RET && LA27_0<=SJMP)||LA27_0==VAR))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:79:45: statement
						{
						DebugLocation(79, 45);
						PushFollow(Follow._statement_in_synpred18_NPortugolWalker343);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred18_NPortugolWalker_fragment", 38);
			LeaveRule("synpred18_NPortugolWalker_fragment", 38);
			LeaveRule_synpred18_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred18_NPortugolWalker

	partial void EnterRule_synpred20_NPortugolWalker_fragment();
	partial void LeaveRule_synpred20_NPortugolWalker_fragment();

	// $ANTLR start synpred20_NPortugolWalker
	public void synpred20_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred20_NPortugolWalker_fragment();
		EnterRule("synpred20_NPortugolWalker_fragment", 40);
		TraceIn("synpred20_NPortugolWalker_fragment", 40);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:80:4: ( ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:80:4: ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) )
			{
			DebugLocation(80, 4);
			DebugLocation(80, 6);
			Match(input,LOOP,Follow._LOOP_in_synpred20_NPortugolWalker354); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(80, 11);
			Match(input,DEC,Follow._DEC_in_synpred20_NPortugolWalker356); if (state.failed) return;
			DebugLocation(80, 16);
			PushFollow(Follow._assign_var_in_synpred20_NPortugolWalker360);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(80, 29);
			i=(CommonTree)Match(input,INT,Follow._INT_in_synpred20_NPortugolWalker364); if (state.failed) return;
			DebugLocation(80, 34);
			DebugLocation(80, 36);
			Match(input,SLIST,Follow._SLIST_in_synpred20_NPortugolWalker367); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(80, 42);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:80:42: ( statement )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if (((LA28_0>=ASGN && LA28_0<=CALL)||LA28_0==JMP||LA28_0==LOOP||(LA28_0>=RET && LA28_0<=SJMP)||LA28_0==VAR))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:80:42: statement
						{
						DebugLocation(80, 42);
						PushFollow(Follow._statement_in_synpred20_NPortugolWalker369);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred20_NPortugolWalker_fragment", 40);
			LeaveRule("synpred20_NPortugolWalker_fragment", 40);
			LeaveRule_synpred20_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred20_NPortugolWalker

	partial void EnterRule_synpred22_NPortugolWalker_fragment();
	partial void LeaveRule_synpred22_NPortugolWalker_fragment();

	// $ANTLR start synpred22_NPortugolWalker
	public void synpred22_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred22_NPortugolWalker_fragment();
		EnterRule("synpred22_NPortugolWalker_fragment", 42);
		TraceIn("synpred22_NPortugolWalker_fragment", 42);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:81:4: ( ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:81:4: ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) )
			{
			DebugLocation(81, 4);
			DebugLocation(81, 6);
			Match(input,LOOP,Follow._LOOP_in_synpred22_NPortugolWalker379); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(81, 12);
			PushFollow(Follow._assign_var_in_synpred22_NPortugolWalker383);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(81, 25);
			i=(CommonTree)Match(input,ID,Follow._ID_in_synpred22_NPortugolWalker387); if (state.failed) return;
			DebugLocation(81, 29);
			DebugLocation(81, 31);
			Match(input,SLIST,Follow._SLIST_in_synpred22_NPortugolWalker390); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(81, 37);
				// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:81:37: ( statement )*
				try { DebugEnterSubRule(29);
				while (true)
				{
					int alt29=2;
					try { DebugEnterDecision(29, false);
					int LA29_0 = input.LA(1);

					if (((LA29_0>=ASGN && LA29_0<=CALL)||LA29_0==JMP||LA29_0==LOOP||(LA29_0>=RET && LA29_0<=SJMP)||LA29_0==VAR))
					{
						alt29 = 1;
					}


					} finally { DebugExitDecision(29); }
					switch ( alt29 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:81:37: statement
						{
						DebugLocation(81, 37);
						PushFollow(Follow._statement_in_synpred22_NPortugolWalker392);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop29;
					}
				}

				loop29:
					;

				} finally { DebugExitSubRule(29); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred22_NPortugolWalker_fragment", 42);
			LeaveRule("synpred22_NPortugolWalker_fragment", 42);
			LeaveRule_synpred22_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred22_NPortugolWalker

	partial void EnterRule_synpred28_NPortugolWalker_fragment();
	partial void LeaveRule_synpred28_NPortugolWalker_fragment();

	// $ANTLR start synpred28_NPortugolWalker
	public void synpred28_NPortugolWalker_fragment()
	{
		object a = default(object);

		EnterRule_synpred28_NPortugolWalker_fragment();
		EnterRule("synpred28_NPortugolWalker_fragment", 48);
		TraceIn("synpred28_NPortugolWalker_fragment", 48);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:113:7: ( ^( ASGN ID a= atom ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:113:7: ^( ASGN ID a= atom )
			{
			DebugLocation(113, 7);
			DebugLocation(113, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred28_NPortugolWalker599); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(113, 14);
			Match(input,ID,Follow._ID_in_synpred28_NPortugolWalker601); if (state.failed) return;
			DebugLocation(113, 18);
			PushFollow(Follow._atom_in_synpred28_NPortugolWalker605);
			a=atom();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred28_NPortugolWalker_fragment", 48);
			LeaveRule("synpred28_NPortugolWalker_fragment", 48);
			LeaveRule_synpred28_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred28_NPortugolWalker

	partial void EnterRule_synpred29_NPortugolWalker_fragment();
	partial void LeaveRule_synpred29_NPortugolWalker_fragment();

	// $ANTLR start synpred29_NPortugolWalker
	public void synpred29_NPortugolWalker_fragment()
	{
		EnterRule_synpred29_NPortugolWalker_fragment();
		EnterRule("synpred29_NPortugolWalker_fragment", 49);
		TraceIn("synpred29_NPortugolWalker_fragment", 49);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:114:7: ( ^( ASGN ^( AR INT ) ID plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:114:7: ^( ASGN ^( AR INT ) ID plus_expression )
			{
			DebugLocation(114, 7);
			DebugLocation(114, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred29_NPortugolWalker617); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(114, 14);
			DebugLocation(114, 16);
			Match(input,AR,Follow._AR_in_synpred29_NPortugolWalker620); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(114, 19);
			Match(input,INT,Follow._INT_in_synpred29_NPortugolWalker622); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(114, 24);
			Match(input,ID,Follow._ID_in_synpred29_NPortugolWalker625); if (state.failed) return;
			DebugLocation(114, 27);
			PushFollow(Follow._plus_expression_in_synpred29_NPortugolWalker627);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred29_NPortugolWalker_fragment", 49);
			LeaveRule("synpred29_NPortugolWalker_fragment", 49);
			LeaveRule_synpred29_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred29_NPortugolWalker

	partial void EnterRule_synpred30_NPortugolWalker_fragment();
	partial void LeaveRule_synpred30_NPortugolWalker_fragment();

	// $ANTLR start synpred30_NPortugolWalker
	public void synpred30_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		CommonTree p = default(CommonTree);

		EnterRule_synpred30_NPortugolWalker_fragment();
		EnterRule("synpred30_NPortugolWalker_fragment", 50);
		TraceIn("synpred30_NPortugolWalker_fragment", 50);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:115:7: ( ^( ASGN ^( AR i= ID ) p= ID plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:115:7: ^( ASGN ^( AR i= ID ) p= ID plus_expression )
			{
			DebugLocation(115, 7);
			DebugLocation(115, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred30_NPortugolWalker643); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(115, 14);
			DebugLocation(115, 16);
			Match(input,AR,Follow._AR_in_synpred30_NPortugolWalker646); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(115, 20);
			i=(CommonTree)Match(input,ID,Follow._ID_in_synpred30_NPortugolWalker650); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(115, 26);
			p=(CommonTree)Match(input,ID,Follow._ID_in_synpred30_NPortugolWalker655); if (state.failed) return;
			DebugLocation(115, 30);
			PushFollow(Follow._plus_expression_in_synpred30_NPortugolWalker657);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred30_NPortugolWalker_fragment", 50);
			LeaveRule("synpred30_NPortugolWalker_fragment", 50);
			LeaveRule_synpred30_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred30_NPortugolWalker

	partial void EnterRule_synpred31_NPortugolWalker_fragment();
	partial void LeaveRule_synpred31_NPortugolWalker_fragment();

	// $ANTLR start synpred31_NPortugolWalker
	public void synpred31_NPortugolWalker_fragment()
	{
		EnterRule_synpred31_NPortugolWalker_fragment();
		EnterRule("synpred31_NPortugolWalker_fragment", 51);
		TraceIn("synpred31_NPortugolWalker_fragment", 51);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:116:7: ( ^( ASGN ID plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:116:7: ^( ASGN ID plus_expression )
			{
			DebugLocation(116, 7);
			DebugLocation(116, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred31_NPortugolWalker676); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(116, 14);
			Match(input,ID,Follow._ID_in_synpred31_NPortugolWalker678); if (state.failed) return;
			DebugLocation(116, 17);
			PushFollow(Follow._plus_expression_in_synpred31_NPortugolWalker680);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred31_NPortugolWalker_fragment", 51);
			LeaveRule("synpred31_NPortugolWalker_fragment", 51);
			LeaveRule_synpred31_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred31_NPortugolWalker

	partial void EnterRule_synpred32_NPortugolWalker_fragment();
	partial void LeaveRule_synpred32_NPortugolWalker_fragment();

	// $ANTLR start synpred32_NPortugolWalker
	public void synpred32_NPortugolWalker_fragment()
	{
		EnterRule_synpred32_NPortugolWalker_fragment();
		EnterRule("synpred32_NPortugolWalker_fragment", 52);
		TraceIn("synpred32_NPortugolWalker_fragment", 52);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:117:7: ( ^( ASGN ID 'nulo' ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:117:7: ^( ASGN ID 'nulo' )
			{
			DebugLocation(117, 7);
			DebugLocation(117, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred32_NPortugolWalker693); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(117, 14);
			Match(input,ID,Follow._ID_in_synpred32_NPortugolWalker695); if (state.failed) return;
			DebugLocation(117, 17);
			Match(input,75,Follow._75_in_synpred32_NPortugolWalker697); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred32_NPortugolWalker_fragment", 52);
			LeaveRule("synpred32_NPortugolWalker_fragment", 52);
			LeaveRule_synpred32_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred32_NPortugolWalker

	partial void EnterRule_synpred33_NPortugolWalker_fragment();
	partial void LeaveRule_synpred33_NPortugolWalker_fragment();

	// $ANTLR start synpred33_NPortugolWalker
	public void synpred33_NPortugolWalker_fragment()
	{
		EnterRule_synpred33_NPortugolWalker_fragment();
		EnterRule("synpred33_NPortugolWalker_fragment", 53);
		TraceIn("synpred33_NPortugolWalker_fragment", 53);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:118:7: ( ^( ASGN ID 'falso' ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:118:7: ^( ASGN ID 'falso' )
			{
			DebugLocation(118, 7);
			DebugLocation(118, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred33_NPortugolWalker710); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(118, 14);
			Match(input,ID,Follow._ID_in_synpred33_NPortugolWalker712); if (state.failed) return;
			DebugLocation(118, 17);
			Match(input,74,Follow._74_in_synpred33_NPortugolWalker714); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred33_NPortugolWalker_fragment", 53);
			LeaveRule("synpred33_NPortugolWalker_fragment", 53);
			LeaveRule_synpred33_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred33_NPortugolWalker

	partial void EnterRule_synpred34_NPortugolWalker_fragment();
	partial void LeaveRule_synpred34_NPortugolWalker_fragment();

	// $ANTLR start synpred34_NPortugolWalker
	public void synpred34_NPortugolWalker_fragment()
	{
		EnterRule_synpred34_NPortugolWalker_fragment();
		EnterRule("synpred34_NPortugolWalker_fragment", 54);
		TraceIn("synpred34_NPortugolWalker_fragment", 54);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:119:7: ( ^( ASGN ID 'verdadeiro' ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:119:7: ^( ASGN ID 'verdadeiro' )
			{
			DebugLocation(119, 7);
			DebugLocation(119, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred34_NPortugolWalker726); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(119, 14);
			Match(input,ID,Follow._ID_in_synpred34_NPortugolWalker728); if (state.failed) return;
			DebugLocation(119, 17);
			Match(input,76,Follow._76_in_synpred34_NPortugolWalker730); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred34_NPortugolWalker_fragment", 54);
			LeaveRule("synpred34_NPortugolWalker_fragment", 54);
			LeaveRule_synpred34_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred34_NPortugolWalker

	partial void EnterRule_synpred35_NPortugolWalker_fragment();
	partial void LeaveRule_synpred35_NPortugolWalker_fragment();

	// $ANTLR start synpred35_NPortugolWalker
	public void synpred35_NPortugolWalker_fragment()
	{
		CommonTree l = default(CommonTree);
		CommonTree r = default(CommonTree);

		EnterRule_synpred35_NPortugolWalker_fragment();
		EnterRule("synpred35_NPortugolWalker_fragment", 55);
		TraceIn("synpred35_NPortugolWalker_fragment", 55);
		try
		{
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:120:7: ( ^( ASGN ID l= INT r= INT ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol2\\src\\NPortugol2\\Compiler\\NPortugolWalker.g:120:7: ^( ASGN ID l= INT r= INT )
			{
			DebugLocation(120, 7);
			DebugLocation(120, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred35_NPortugolWalker748); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(120, 14);
			Match(input,ID,Follow._ID_in_synpred35_NPortugolWalker750); if (state.failed) return;
			DebugLocation(120, 18);
			l=(CommonTree)Match(input,INT,Follow._INT_in_synpred35_NPortugolWalker754); if (state.failed) return;
			DebugLocation(120, 24);
			r=(CommonTree)Match(input,INT,Follow._INT_in_synpred35_NPortugolWalker758); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred35_NPortugolWalker_fragment", 55);
			LeaveRule("synpred35_NPortugolWalker_fragment", 55);
			LeaveRule_synpred35_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred35_NPortugolWalker
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _declare_function_in_compile62 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _FUNC_in_declare_function76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _TYPE_in_declare_function78 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_declare_function81 = new BitSet(new ulong[]{0x110000000UL});
		public static readonly BitSet _function_param_list_in_declare_function83 = new BitSet(new ulong[]{0x110000000UL});
		public static readonly BitSet _SLIST_in_declare_function87 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_declare_function89 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _declare_local_in_statement105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_stat_in_statement110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_stat_in_statement116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_call_in_statement121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assign_var_in_statement127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_stat_in_statement132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _asm_code_in_statement137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PARAM_in_function_param_list157 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _param_in_function_param_list159 = new BitSet(new ulong[]{0x400000008UL});
		public static readonly BitSet _TYPE_in_param177 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_param181 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VAR_in_declare_local196 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _local_var_in_declare_local200 = new BitSet(new ulong[]{0x20008UL});
		public static readonly BitSet _ID_in_declare_local204 = new BitSet(new ulong[]{0x20008UL});
		public static readonly BitSet _TYPE_in_local_var228 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_local_var232 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SJMP_in_if_stat250 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _LEXP_in_if_stat253 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logic_expression_in_if_stat255 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SLIST_in_if_stat259 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_if_stat261 = new BitSet(new ulong[]{0x11C14001C0UL});
		public static readonly BitSet _senao_stat_in_if_stat266 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _JMP_in_if_stat275 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _LEXP_in_if_stat278 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logic_expression_in_if_stat280 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SLIST_in_if_stat284 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_if_stat286 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _SLIST_in_senao_stat305 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_senao_stat307 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _LOOP_in_for_stat330 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_for_stat334 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_for_stat338 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SLIST_in_for_stat341 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat343 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _LOOP_in_for_stat354 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_for_stat356 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_for_stat360 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_for_stat364 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SLIST_in_for_stat367 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat369 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _LOOP_in_for_stat379 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_for_stat383 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_for_stat387 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SLIST_in_for_stat390 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat392 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _LOOP_in_for_stat403 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_for_stat405 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_for_stat409 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_for_stat413 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SLIST_in_for_stat416 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat418 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _CALL_in_function_call442 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_function_call444 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _function_arg_list_in_function_call446 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _PCALL_in_property_call467 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_property_call471 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_property_call475 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MCALL_in_method_call500 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_method_call504 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_method_call508 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _function_arg_list_in_method_call510 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _ARG_in_function_arg_list536 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_function_arg_list538 = new BitSet(new ulong[]{0x25802222A4108UL});
		public static readonly BitSet _ASM_in_asm_code554 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STRING_in_asm_code558 = new BitSet(new ulong[]{0x200000008UL});
		public static readonly BitSet _ASGN_in_assign_var599 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var601 = new BitSet(new ulong[]{0x200224000UL});
		public static readonly BitSet _atom_in_assign_var605 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var617 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_assign_var620 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_assign_var622 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_assign_var625 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_assign_var627 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var643 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_assign_var646 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var650 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_assign_var655 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_assign_var657 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var676 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var678 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_assign_var680 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var693 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var695 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_assign_var697 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var710 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var712 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_assign_var714 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var726 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var728 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_assign_var730 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var748 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var750 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_assign_var754 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_assign_var758 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var770 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var772 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _ILIST_in_assign_var775 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_assign_var779 = new BitSet(new ulong[]{0x200008UL});
		public static readonly BitSet _RET_in_return_stat802 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_return_stat804 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _44_in_plus_expression831 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression833 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_plus_expression835 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _46_in_plus_expression843 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression845 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_plus_expression847 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _43_in_plus_expression855 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression857 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_plus_expression859 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _49_in_plus_expression867 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression869 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_plus_expression871 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDEX_in_plus_expression879 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_plus_expression881 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_plus_expression884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDEX_in_plus_expression891 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_plus_expression895 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_plus_expression900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_call_in_plus_expression906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _method_call_in_plus_expression910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_call_in_plus_expression914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_plus_expression918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_logic_expression931 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression933 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression935 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _54_in_logic_expression946 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression948 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression950 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _51_in_logic_expression961 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression963 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression965 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _55_in_logic_expression976 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression978 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression980 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _53_in_logic_expression991 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression993 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression995 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _38_in_logic_expression1006 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression1008 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression1010 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _60_in_logic_expression1020 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression1022 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression1024 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _65_in_logic_expression1033 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression1035 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_logic_expression1037 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _plus_expression_in_logic_expression1049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_atom1077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_atom1089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOAT_in_atom1101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom1113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOOP_in_synpred18_NPortugolWalker330 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_synpred18_NPortugolWalker334 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_synpred18_NPortugolWalker338 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SLIST_in_synpred18_NPortugolWalker341 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred18_NPortugolWalker343 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _LOOP_in_synpred20_NPortugolWalker354 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_synpred20_NPortugolWalker356 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_synpred20_NPortugolWalker360 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_synpred20_NPortugolWalker364 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SLIST_in_synpred20_NPortugolWalker367 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred20_NPortugolWalker369 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _LOOP_in_synpred22_NPortugolWalker379 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_synpred22_NPortugolWalker383 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_synpred22_NPortugolWalker387 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _SLIST_in_synpred22_NPortugolWalker390 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred22_NPortugolWalker392 = new BitSet(new ulong[]{0x10C14001C8UL});
		public static readonly BitSet _ASGN_in_synpred28_NPortugolWalker599 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred28_NPortugolWalker601 = new BitSet(new ulong[]{0x200224000UL});
		public static readonly BitSet _atom_in_synpred28_NPortugolWalker605 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred29_NPortugolWalker617 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_synpred29_NPortugolWalker620 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_synpred29_NPortugolWalker622 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_synpred29_NPortugolWalker625 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_synpred29_NPortugolWalker627 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred30_NPortugolWalker643 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_synpred30_NPortugolWalker646 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred30_NPortugolWalker650 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_synpred30_NPortugolWalker655 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_synpred30_NPortugolWalker657 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred31_NPortugolWalker676 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred31_NPortugolWalker678 = new BitSet(new ulong[]{0x25802222A4100UL});
		public static readonly BitSet _plus_expression_in_synpred31_NPortugolWalker680 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred32_NPortugolWalker693 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred32_NPortugolWalker695 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_synpred32_NPortugolWalker697 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred33_NPortugolWalker710 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred33_NPortugolWalker712 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_synpred33_NPortugolWalker714 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred34_NPortugolWalker726 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred34_NPortugolWalker728 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_synpred34_NPortugolWalker730 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred35_NPortugolWalker748 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred35_NPortugolWalker750 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_synpred35_NPortugolWalker754 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _INT_in_synpred35_NPortugolWalker758 = new BitSet(new ulong[]{0x8UL});
	}
	#endregion Follow sets
}

} // namespace NPortugol2.Compiler
